{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"First and foremost, this is an unofficial port of shadcn/ui to MkDocs , and is not affiliated with @shadcn . The main goal of this project is to port the shadcn style to mkdocs while avoiding to turn it into a whole framework of the death. So first it should support built-in extensions and some pymdownx ones. Migrating from mkdocs-material? In the general case, I would advise not migrating from mkdocs-material since this theme is well established, very mature, with a lot of features we love. You can easily migrate to this theme if your documentaion does not rely on too many extensions/plugins. Of course, this is also a good choice for your next brand new project!","title":"Welcome to mkdocs-shadcn"},{"location":"get_started/","text":"Install Add the package to your project. pip :::bash pip install mkdocs-shadcn uv :::bash uv add mkdocs-shadcn poetry :::bash poetry add mkdocs-shadcn If you want to use pymdown extensions, you can also install the pymdown-extensions package: pip :::bash pip install pymdown-extensions uv :::bash uv add pymdown-extensions poetry :::bash poetry add pymdown-extensions Configure 1 2 3 4 5 6 7 8 9 10 # mkdocs.yml site_name : \"awesome-project\" theme : name : shadcn show_title : true # show the title in the top bar show_stargazers : true # show the stargazers in the top bar pygments_style : # default styles light : shadcn-light dark : github-dark icon : heroicons:rocket-launch # use the shadcn svg if not defined Currently there are not many options and they are likely to change. You can define an icon (image url or iconify class ) for the top bar. show_title ( bool ): If false , only the icon will be visible in the top bar (left-side). Default to true . show_stargazers ( bool ): If false , hides the GitHub stargazers besides the repo icon in the top bar (right side). Default to true . pygments_style ( str | dict ): Define the pygments style for the code blocks. Supported styles are given below. If a single theme is provided, it is applies for both light and dark themes. If a dictionary is provided, it should contain light and dark keys with the respective styles. function updatePygmentsStyle(event) { const style = event.target.value; for (const el of document.querySelectorAll(\".pygments-demo\")) { el.classList.remove(prevValue); el.classList.add(style); } prevValue = style; } a11y-dark a11y-high-contrast-dark a11y-high-contrast-light a11y-light abap algol algol_nu arduino autumn blinds-dark blinds-light borland bw coffee colorful default dracula emacs friendly friendly_grayscale fruity github-dark-colorblind github-dark github-dark-high-contrast github-light-colorblind github-light github-light-high-contrast gotthard-dark gotthard-light greative gruvbox-dark gruvbox-light igor inkpot lightbulb lilypond lovelace manni material monokai murphy native nord nord-darker one-dark paraiso-dark paraiso-light pastie perldoc pitaya-smoothie rainbow_dash rrt sas shadcn-light solarized-dark solarized-light staroffice stata-dark stata-light tango trac vim vs xcode zenburn let prevValue = document.getElementById(\"pygments-select\").value; 1 2 3 4 5 6 7 8 def fibonacci ( n ): a , b = 0 , 1 for _ in range ( n ): yield a a , b = b , a + b for num in fibonacci ( 10 ): print ( num ) icon ( str ): Sets the top-left icon. If not defined, the default shadcn icon is used. You can either pass an image URL or an iconify class .","title":"Get started"},{"location":"get_started/#install","text":"Add the package to your project. pip :::bash pip install mkdocs-shadcn uv :::bash uv add mkdocs-shadcn poetry :::bash poetry add mkdocs-shadcn If you want to use pymdown extensions, you can also install the pymdown-extensions package: pip :::bash pip install pymdown-extensions uv :::bash uv add pymdown-extensions poetry :::bash poetry add pymdown-extensions","title":"Install"},{"location":"get_started/#configure","text":"1 2 3 4 5 6 7 8 9 10 # mkdocs.yml site_name : \"awesome-project\" theme : name : shadcn show_title : true # show the title in the top bar show_stargazers : true # show the stargazers in the top bar pygments_style : # default styles light : shadcn-light dark : github-dark icon : heroicons:rocket-launch # use the shadcn svg if not defined Currently there are not many options and they are likely to change. You can define an icon (image url or iconify class ) for the top bar. show_title ( bool ): If false , only the icon will be visible in the top bar (left-side). Default to true . show_stargazers ( bool ): If false , hides the GitHub stargazers besides the repo icon in the top bar (right side). Default to true . pygments_style ( str | dict ): Define the pygments style for the code blocks. Supported styles are given below. If a single theme is provided, it is applies for both light and dark themes. If a dictionary is provided, it should contain light and dark keys with the respective styles. function updatePygmentsStyle(event) { const style = event.target.value; for (const el of document.querySelectorAll(\".pygments-demo\")) { el.classList.remove(prevValue); el.classList.add(style); } prevValue = style; } a11y-dark a11y-high-contrast-dark a11y-high-contrast-light a11y-light abap algol algol_nu arduino autumn blinds-dark blinds-light borland bw coffee colorful default dracula emacs friendly friendly_grayscale fruity github-dark-colorblind github-dark github-dark-high-contrast github-light-colorblind github-light github-light-high-contrast gotthard-dark gotthard-light greative gruvbox-dark gruvbox-light igor inkpot lightbulb lilypond lovelace manni material monokai murphy native nord nord-darker one-dark paraiso-dark paraiso-light pastie perldoc pitaya-smoothie rainbow_dash rrt sas shadcn-light solarized-dark solarized-light staroffice stata-dark stata-light tango trac vim vs xcode zenburn let prevValue = document.getElementById(\"pygments-select\").value; 1 2 3 4 5 6 7 8 def fibonacci ( n ): a , b = 0 , 1 for _ in range ( n ): yield a a , b = b , a + b for num in fibonacci ( 10 ): print ( num ) icon ( str ): Sets the top-left icon. If not defined, the default shadcn icon is used. You can either pass an image URL or an iconify class .","title":"Configure"},{"location":"pages/","text":"Like this page, you can define its title (and subtitle) through front-matter configuration. 1 2 title : Pages # title summary : Metadata configuration # subtitle You can also define your page title directly with # Page title in the markdown content. Navigation The navigation follows bare mkdocs. You should just notice that folders will create categories in the sidebar. To sort the sections, you can use the common 00_section_title/ hack. The first numbers sort the folders in the filesystem (so the sections). They are removed by the theme at compile time. Important mkdocs-shadcn has not been tested with highly nested documentation ( d>2 , i.e. root / folder / folder ) In addition, two other attributes may help to configure pages within the sidebar. 1 2 order : 2 sidebar_title : Navigation title The order attribute may help to change the rank of the page in the sidebar (without setting the nav setting in mkdocs.yml ). By default, mkdocs ranks pages through alphabetical order. We keep this behavior if order is not set. Let us take this example: 1 2 3 4 | a.md ; order not set | b.md ; order : 42 | c.md ; order : 0 | d.md ; order not set After a first pass we will have 1 2 3 4 | a.md ; order : 0 | b.md ; order : 42 | c.md ; order : 0 | d.md ; order : 1 So in the sidebar we will get a.md , c.md , d.md and b.md . External links You can add external links (like \"API Reference\") in the page header. This is done through the external_links attribute in the front-matter. 1 2 3 external_links : \"API Reference\" : https://ui.shadcn.com/docs/components GitHub : https://github.com/asiffer/mkdocs-shadcn SEO The following attributes are supported for SEO ( <meta> attributes in the <head> ). 1 2 3 4 description : Extra page description keywords : mkdocs,shadcn author : asiffer image : https://raw.githubusercontent.com/asiffer/mkdocs-shadcn/refs/heads/master/.github/assets/logo.svg Extra As we may find in shadcn/ui , we can add a NEW tag in the sidebar ( Alpha and Beta are also available). 1 2 3 new : true # beta: true # alpha: true Finally you an also load per-page CSS and JS files. This is done through the extra_css and extra_javascript attributes. 1 2 3 4 extra_css : - css/custom.css extra_javascript : - js/custom.js","title":"Pages"},{"location":"pages/#navigation","text":"The navigation follows bare mkdocs. You should just notice that folders will create categories in the sidebar. To sort the sections, you can use the common 00_section_title/ hack. The first numbers sort the folders in the filesystem (so the sections). They are removed by the theme at compile time. Important mkdocs-shadcn has not been tested with highly nested documentation ( d>2 , i.e. root / folder / folder ) In addition, two other attributes may help to configure pages within the sidebar. 1 2 order : 2 sidebar_title : Navigation title The order attribute may help to change the rank of the page in the sidebar (without setting the nav setting in mkdocs.yml ). By default, mkdocs ranks pages through alphabetical order. We keep this behavior if order is not set. Let us take this example: 1 2 3 4 | a.md ; order not set | b.md ; order : 42 | c.md ; order : 0 | d.md ; order not set After a first pass we will have 1 2 3 4 | a.md ; order : 0 | b.md ; order : 42 | c.md ; order : 0 | d.md ; order : 1 So in the sidebar we will get a.md , c.md , d.md and b.md .","title":"Navigation"},{"location":"pages/#external-links","text":"You can add external links (like \"API Reference\") in the page header. This is done through the external_links attribute in the front-matter. 1 2 3 external_links : \"API Reference\" : https://ui.shadcn.com/docs/components GitHub : https://github.com/asiffer/mkdocs-shadcn","title":"External links"},{"location":"pages/#seo","text":"The following attributes are supported for SEO ( <meta> attributes in the <head> ). 1 2 3 4 description : Extra page description keywords : mkdocs,shadcn author : asiffer image : https://raw.githubusercontent.com/asiffer/mkdocs-shadcn/refs/heads/master/.github/assets/logo.svg","title":"SEO"},{"location":"pages/#extra","text":"As we may find in shadcn/ui , we can add a NEW tag in the sidebar ( Alpha and Beta are also available). 1 2 3 new : true # beta: true # alpha: true Finally you an also load per-page CSS and JS files. This is done through the extra_css and extra_javascript attributes. 1 2 3 4 extra_css : - css/custom.css extra_javascript : - js/custom.js","title":"Extra"},{"location":"Competitive%20Probability/Coins/","text":"Anna and Brenda are playing a game. They repeatedly toss a coin. Anna wins if 3 heads appear. Brenda wins if 3 tails appear. The heads and tails do not need to be consecutive. What is the expected number of coin tosses for a winner to be determined? Steps: 1- Find the expected number of tosses to find 3 Heads of a coin.","title":"Coins"},{"location":"Competitive%20Probability/Collecting%20Toys%20I/","text":"Every box of cereal contains one toy from a group of 5 distinct toys, each of which is mutually independent from the others and is equally likely to be within a given box. How many distinct toys can you expect to collect if you bought 7 boxes? First Principles Reasoning This is very similar to coupon collector problem. Lets us the expected value derived from each trial as T1 .. T7. By Linearity of [[Expectation]], we can write \\[ E = E(T_1) + .. + E(T_7) \\] Now the problem reduces to computing each expectation. E(T_1) = 1 E(T_2) = 5/4 E(T_3) = E(T_2) + 5/3 E(T_4) = E(T_3) + E(T_2) + 5/2 E(T_5) = E(T_4) + E(T_3) + E(T_2) + 5/1 E(T_5) = E(T_4) + E(T_3) + E(T_2) + E(T_7) = E(T_6) + E(T_5)","title":"Collecting Toys I"},{"location":"Competitive%20Probability/Collecting%20Toys%20I/#first-principles-reasoning","text":"This is very similar to coupon collector problem. Lets us the expected value derived from each trial as T1 .. T7. By Linearity of [[Expectation]], we can write \\[ E = E(T_1) + .. + E(T_7) \\] Now the problem reduces to computing each expectation. E(T_1) = 1 E(T_2) = 5/4 E(T_3) = E(T_2) + 5/3 E(T_4) = E(T_3) + E(T_2) + 5/2 E(T_5) = E(T_4) + E(T_3) + E(T_2) + 5/1 E(T_5) = E(T_4) + E(T_3) + E(T_2) + E(T_7) = E(T_6) + E(T_5)","title":"First Principles Reasoning"},{"location":"Competitive%20Probability/Combinatorics/","text":"1. Permute 2 objects of 2 distinct types in 4 spots. You're placing 2 A-type and 2 B-type objects into 4 positions. The number of distinct permutations is: \\[ \\frac{4!}{2! \\cdot 2!} = 6 \\] Memory Trick: Think of the 4 spots as a 4-letter word made of 2 As and 2 Bs (e.g., AABB). To remember the count: * Total ways to arrange 4 items = 4! * But A and B repeat , so divide by repeats : * 2! for A's * 2! for B's * So: $$ \\frac{4!}{2! \\cdot 2!} = 6 $$","title":"Combinatorics"},{"location":"Competitive%20Probability/Combinatorics/#1-permute-2-objects-of-2-distinct-types-in-4-spots","text":"You're placing 2 A-type and 2 B-type objects into 4 positions. The number of distinct permutations is: \\[ \\frac{4!}{2! \\cdot 2!} = 6 \\]","title":"1. Permute 2 objects of 2 distinct types in 4 spots."},{"location":"Competitive%20Probability/Combinatorics/#memory-trick","text":"Think of the 4 spots as a 4-letter word made of 2 As and 2 Bs (e.g., AABB). To remember the count: * Total ways to arrange 4 items = 4! * But A and B repeat , so divide by repeats : * 2! for A's * 2! for B's * So: $$ \\frac{4!}{2! \\cdot 2!} = 6 $$","title":"Memory Trick:"},{"location":"Competitive%20Probability/Coupon%20Collector/","text":"TL;DR If there are \\(N\\) different items (like toys or coupons), and each time you pick one at random, it gets harder to find the missing ones as your collection grows. * First item is always new. * Second one is still easy to find. * But the last few are rare\u2014you keep getting duplicates. The average number of total picks you need to get all \\(N\\) different items is about: $$ N \\times (\\ln N + 0.577) $$ This grows a bit faster than linear. For 50 items, you'd need about 225 tries. Problem Statement You have \\(N\\) unique coupons. Each time you draw, you get one coupon chosen uniformly at random (with replacement). Goal: Find how many draws it takes on average to collect all \\(N\\) distinct coupons. Building Blocks [[Geometric Distribution]]: Geometric distribution tells you the probability of first success in a series of repeated experiments. The expectation of Geometric Distribution is 1/p. [[Expectation]]: It is probability weighted average of a distribution. Thing of it as centre of gravity. Linearity of [[Expectation]]: Sum of expectations is Expectation of the sum. How to think about it? Think of collecting the coupons one by one: Stage 1: How many draws to get the first new coupon? \u2192 Always 1 (since you start with none). Let us call it \\(T_1\\) Stage 2: Now you have 1 unique coupon. What's the chance the next draw gives a new one? Here we measure the probability of success till we get our first success. This is where [[Geometric Distribution]] is useful. Let us call this \\(T_2\\) \u2192 Probability = \\(\\frac{N - 1}{N}\\) , so expected number of tries = \\(\\frac{N}{N - 1}\\) Stage 3: Now you have 2 unique coupons. Probability next is new = \\(\\frac{N - 2}{N}\\) , expected tries = \\(\\frac{N}{N - 2}\\) . Let us call this \\(T_3\\) And so on... By linearity of expectations: $$ E(T) = E(T_1 + \\dots + T_n) = E(T_1) + \\dots + E(T_n)$$ This implies: $$\\begin{aligned} E(T) &= 1+ \\frac{N}{N-1} + \\frac{N}{N-2} + \\dots + \\frac{N}{N-k+1} \\ &= N \\left[\\frac{1}{N} + \\dots + \\frac{1}{N-k+1} + 1 \\right] \\end{aligned} $$ The term in the bracket is a [[Harmonic Sum]], which is \\(\\log(n)\\) Hence Expectation is \\(n \\log(n)\\)","title":"Coupon Collector"},{"location":"Competitive%20Probability/Coupon%20Collector/#tldr","text":"If there are \\(N\\) different items (like toys or coupons), and each time you pick one at random, it gets harder to find the missing ones as your collection grows. * First item is always new. * Second one is still easy to find. * But the last few are rare\u2014you keep getting duplicates. The average number of total picks you need to get all \\(N\\) different items is about: $$ N \\times (\\ln N + 0.577) $$ This grows a bit faster than linear. For 50 items, you'd need about 225 tries.","title":"TL;DR"},{"location":"Competitive%20Probability/Coupon%20Collector/#problem-statement","text":"You have \\(N\\) unique coupons. Each time you draw, you get one coupon chosen uniformly at random (with replacement). Goal: Find how many draws it takes on average to collect all \\(N\\) distinct coupons.","title":"Problem Statement"},{"location":"Competitive%20Probability/Coupon%20Collector/#building-blocks","text":"[[Geometric Distribution]]: Geometric distribution tells you the probability of first success in a series of repeated experiments. The expectation of Geometric Distribution is 1/p. [[Expectation]]: It is probability weighted average of a distribution. Thing of it as centre of gravity. Linearity of [[Expectation]]: Sum of expectations is Expectation of the sum.","title":"Building Blocks"},{"location":"Competitive%20Probability/Coupon%20Collector/#how-to-think-about-it","text":"Think of collecting the coupons one by one: Stage 1: How many draws to get the first new coupon? \u2192 Always 1 (since you start with none). Let us call it \\(T_1\\) Stage 2: Now you have 1 unique coupon. What's the chance the next draw gives a new one? Here we measure the probability of success till we get our first success. This is where [[Geometric Distribution]] is useful. Let us call this \\(T_2\\) \u2192 Probability = \\(\\frac{N - 1}{N}\\) , so expected number of tries = \\(\\frac{N}{N - 1}\\) Stage 3: Now you have 2 unique coupons. Probability next is new = \\(\\frac{N - 2}{N}\\) , expected tries = \\(\\frac{N}{N - 2}\\) . Let us call this \\(T_3\\) And so on... By linearity of expectations: $$ E(T) = E(T_1 + \\dots + T_n) = E(T_1) + \\dots + E(T_n)$$ This implies: $$\\begin{aligned} E(T) &= 1+ \\frac{N}{N-1} + \\frac{N}{N-2} + \\dots + \\frac{N}{N-k+1} \\ &= N \\left[\\frac{1}{N} + \\dots + \\frac{1}{N-k+1} + 1 \\right] \\end{aligned} $$ The term in the bracket is a [[Harmonic Sum]], which is \\(\\log(n)\\) Hence Expectation is \\(n \\log(n)\\)","title":"How to think about it?"},{"location":"Competitive%20Probability/Expectation/","text":"Linearity of Expectation Linearity comes straight from the definition of expectation as a weighted average. Because summation (or integration) is a linear operator, expectation inherits linearity. \\[ \\mathbb{E}[X + Y] = \\int_{-\\infty}^\\infty \\int_{-\\infty}^\\infty (x + y) f_{X,Y}(x, y) \\, dx\\,dy $$ $$ = \\int x f_{X,Y}(x, y)\\,dx\\,dy + \\int y f_{X,Y}(x, y)\\,dx\\,dy = \\mathbb{E}[X] + \\mathbb{E}[Y] \\] Because integration is linear , expectation is linear.","title":"Expectation"},{"location":"Competitive%20Probability/Expectation/#linearity-of-expectation","text":"Linearity comes straight from the definition of expectation as a weighted average. Because summation (or integration) is a linear operator, expectation inherits linearity. \\[ \\mathbb{E}[X + Y] = \\int_{-\\infty}^\\infty \\int_{-\\infty}^\\infty (x + y) f_{X,Y}(x, y) \\, dx\\,dy $$ $$ = \\int x f_{X,Y}(x, y)\\,dx\\,dy + \\int y f_{X,Y}(x, y)\\,dx\\,dy = \\mathbb{E}[X] + \\mathbb{E}[Y] \\] Because integration is linear , expectation is linear.","title":"Linearity of Expectation"},{"location":"Competitive%20Probability/Geometric%20Distribution/","text":"geometric-distribution A geometric distribution models the number of trials you need to run until you get your first success in a sequence of independent attempts, each with the same probability of success. Picture flipping a coin until you hit heads: it\u2019s a simple waiting game where the odds don\u2019t change, and the question is \u201chow long until I win?\u201d Let\u2019s build it up. Start with a single trial \u2014say, a coin flip with success probability - \\(p\\) (e.g., \\(p = 0.5\\) for heads). - Failure is \\(1 - p\\) , and each trial is independent, like rolling a die unaware of past rolls. - Now, imagine waiting for the first success: you might fail \\(k-1\\) times (probability \\((1-p)^{k-1}\\) ), - Then succeed on the \\(k_{th}\\) try (probability \\(p\\) ). The geometric distribution\u2019s probability mass function is: \\(P(X = k) = (1-p)^{k-1} \\cdot p\\) where \\(k = 1, 2, 3, \\ldots\\) . It\u2019s a chain of failures capped by a win, derived from multiplying these basic probabilities together\u2014exponential decay until the breakthrough. Expectation You're trying to get a new coupon you don't already have. If you already have 1 out of \\(N\\) coupons, then there are \\(N - 1\\) new ones left. The chance the next coupon is new = \\(\\frac{N - 1}{N}\\) So, the expected number of draws to get a new one is: \\[ \\text{Expected tries} = \\frac{1}{\\text{Probability}} = \\frac{N}{N - 1} \\] This is just how probability works: if success chance is \\(p\\) , then expected number of trials until success = \\(\\frac{1}{p}\\) . Let \\(X\\) denote the number of tries till the first success. \\( \\(P(X=n) = (1-p)^n \\times p\\) \\) Now the expectation can be written as: $$\\sum^\\infty n (1-p)^n p $$ The sum of a Arithmetic-Geometric progression is: $$ S = \\frac{a}{1-r} + \\frac{dr}{(1-r)^2}$$ Hence the expectation is: \\( \\(E(X) = \\frac{1}{p}\\) \\)","title":"geometric-distribution"},{"location":"Competitive%20Probability/Geometric%20Distribution/#geometric-distribution","text":"A geometric distribution models the number of trials you need to run until you get your first success in a sequence of independent attempts, each with the same probability of success. Picture flipping a coin until you hit heads: it\u2019s a simple waiting game where the odds don\u2019t change, and the question is \u201chow long until I win?\u201d Let\u2019s build it up. Start with a single trial \u2014say, a coin flip with success probability - \\(p\\) (e.g., \\(p = 0.5\\) for heads). - Failure is \\(1 - p\\) , and each trial is independent, like rolling a die unaware of past rolls. - Now, imagine waiting for the first success: you might fail \\(k-1\\) times (probability \\((1-p)^{k-1}\\) ), - Then succeed on the \\(k_{th}\\) try (probability \\(p\\) ). The geometric distribution\u2019s probability mass function is: \\(P(X = k) = (1-p)^{k-1} \\cdot p\\) where \\(k = 1, 2, 3, \\ldots\\) . It\u2019s a chain of failures capped by a win, derived from multiplying these basic probabilities together\u2014exponential decay until the breakthrough.","title":"geometric-distribution"},{"location":"Competitive%20Probability/Geometric%20Distribution/#expectation","text":"You're trying to get a new coupon you don't already have. If you already have 1 out of \\(N\\) coupons, then there are \\(N - 1\\) new ones left. The chance the next coupon is new = \\(\\frac{N - 1}{N}\\) So, the expected number of draws to get a new one is: \\[ \\text{Expected tries} = \\frac{1}{\\text{Probability}} = \\frac{N}{N - 1} \\] This is just how probability works: if success chance is \\(p\\) , then expected number of trials until success = \\(\\frac{1}{p}\\) . Let \\(X\\) denote the number of tries till the first success. \\( \\(P(X=n) = (1-p)^n \\times p\\) \\) Now the expectation can be written as: $$\\sum^\\infty n (1-p)^n p $$ The sum of a Arithmetic-Geometric progression is: $$ S = \\frac{a}{1-r} + \\frac{dr}{(1-r)^2}$$ Hence the expectation is: \\( \\(E(X) = \\frac{1}{p}\\) \\)","title":"Expectation"},{"location":"Competitive%20Probability/Negative%20Binomial%20Distribution/","text":"The expected number of trials to get \\(n\\) successes in a Bernoulli process with success probability \\(p\\) is: \\[ \\mathbb{E}[\\text{trials}] = \\frac{n}{p} \\] Why? (First Principles) Each success takes on average \\(\\frac{1}{p}\\) trials (this is just the expectation of a geometric distribution). So if you need \\(n\\) successes, and each is independent: \\[ \\mathbb{E}[\\text{trials}] = \\underbrace{\\frac{1}{p} + \\frac{1}{p} + \\cdots + \\frac{1}{p}}_{n \\text{ times}} = \\frac{n}{p} \\] Example If the probability of success is 0.2 (e.g., hitting a target with 20% accuracy), and you want 5 hits: $$ \\mathbb{E}[\\text{trials}] = \\frac{5}{0.2} = 25 $$ On average, you'd expect to take 25 shots to land 5 hits. Relationship with Geometric Distribution geometric-distribution The Negative Binomial Distribution generalizes this by modeling the number of trials needed to achieve r successes . It\u2019s essentially the sum of r independent geometric distributions (each representing the trials until a single success). The Geometric Distribution is a special case of the Negative Binomial Distribution where r=1r = 1r=1. The Negative Binomial extends the Geometric Distribution by counting the trials needed for more than one success, not just the first one.","title":"Negative Binomial Distribution"},{"location":"Competitive%20Probability/Negative%20Binomial%20Distribution/#why-first-principles","text":"Each success takes on average \\(\\frac{1}{p}\\) trials (this is just the expectation of a geometric distribution). So if you need \\(n\\) successes, and each is independent: \\[ \\mathbb{E}[\\text{trials}] = \\underbrace{\\frac{1}{p} + \\frac{1}{p} + \\cdots + \\frac{1}{p}}_{n \\text{ times}} = \\frac{n}{p} \\]","title":"Why? (First Principles)"},{"location":"Competitive%20Probability/Negative%20Binomial%20Distribution/#example","text":"If the probability of success is 0.2 (e.g., hitting a target with 20% accuracy), and you want 5 hits: $$ \\mathbb{E}[\\text{trials}] = \\frac{5}{0.2} = 25 $$ On average, you'd expect to take 25 shots to land 5 hits.","title":"Example"},{"location":"Competitive%20Probability/Negative%20Binomial%20Distribution/#relationship-with-geometric-distribution","text":"","title":"Relationship with Geometric Distribution"},{"location":"Competitive%20Probability/Negative%20Binomial%20Distribution/#geometric-distribution","text":"The Negative Binomial Distribution generalizes this by modeling the number of trials needed to achieve r successes . It\u2019s essentially the sum of r independent geometric distributions (each representing the trials until a single success). The Geometric Distribution is a special case of the Negative Binomial Distribution where r=1r = 1r=1. The Negative Binomial extends the Geometric Distribution by counting the trials needed for more than one success, not just the first one.","title":"geometric-distribution"},{"location":"Competitive%20Probability/Optimal%20Substructure%20Reasoning/","text":"You are given 8 fair coins and flip all of them at once. Afterwards, you are allowed to reflip as many coins as you would like one time each. At the end, you are given $1 for each head that appears. Assuming optimal play, find the fair value of this game. Each coin's state (H or T) can be treated independently .So for a single coin: Decision: If the coin is Head (H) : Keep: get $1 Reflip: 50% H, 50% T \u2192 EV = $0.5 Best choice: keep it (since $1 > $0.5) If the coin is Tail (T) : Keep: $0 Reflip: EV = $0.5 Best choice: reflip it (since $0.5 > $0) This decision is independent for each coin \u2192 meaning we solve a subproblem for each coin , and just sum up the optimal outcomes.","title":"Optimal Substructure Reasoning"},{"location":"Competitive%20Probability/Optimal%20Substructure%20Reasoning/#decision","text":"If the coin is Head (H) : Keep: get $1 Reflip: 50% H, 50% T \u2192 EV = $0.5 Best choice: keep it (since $1 > $0.5) If the coin is Tail (T) : Keep: $0 Reflip: EV = $0.5 Best choice: reflip it (since $0.5 > $0) This decision is independent for each coin \u2192 meaning we solve a subproblem for each coin , and just sum up the optimal outcomes.","title":"Decision:"},{"location":"Competitive%20Probability/Place%20and%20Take/","text":"hard You are playing a one-player game with two opaque boxes. At each turn, you can choose to either \"place\" or \"take\". \"Place\" places $1 from a third party into one box randomly. \"Take\" empties out one box randomly and that money is yours. This game consists of 100 turns where you must either place or take. Assuming optimal play, what is the expected payoff of this game? Note that you do not know how much money you have taken until the end of the game. Thought Process Think of every dollar you drop in as a goldfish in a pond. Each time you \u201ctake,\u201d you scoop one of the two ponds at random, so any given goldfish has a 1/2 chance of getting caught. If you plan to scoop k times, the chance a goldfish eventually gets caught is $$ 1 - (\\frac{1}{2})^k $$ How? Probability of not getting caught in \\(k\\) attempts = \\((1/2)^k\\) Probability of getting caught atleast once = \\(1 - (1/2)^k\\) You take \\(k\\) attempts so you place \\(100-k\\) attempts. So payoff function: $$ (100-k)(1 - (\\frac{1}{2})^k) $$ Maximise this payoff as: \\[ \\text{arg max}_k (100-k)(1 - 0.5^k) \\] Differential it wrt \\(k\\) and set the derivative to 0. \\[ \\begin{aligned} \\text{Let} \\ u &= 1-0.5^k \\\\ du/dk &= k0.5^{k-1} \\\\ \\end{aligned} \\] \\[ \\begin{aligned} \\text{Let} \\ v &= 100-k \\\\ du/dv &= -1 \\\\ \\end{aligned} \\] $$ \\begin{aligned} 0.5^k -1 + k0.5^{k-1}(100-k) = 0 \\ 0.5^k + 2k0.5^{k}(100-k) = 1 \\ \\text{Let} \\ 0.5^k = T \\ T - 200kT - 2k^2T =1 \\end{aligned} $$","title":"hard"},{"location":"Competitive%20Probability/Place%20and%20Take/#hard","text":"You are playing a one-player game with two opaque boxes. At each turn, you can choose to either \"place\" or \"take\". \"Place\" places $1 from a third party into one box randomly. \"Take\" empties out one box randomly and that money is yours. This game consists of 100 turns where you must either place or take. Assuming optimal play, what is the expected payoff of this game? Note that you do not know how much money you have taken until the end of the game.","title":"hard"},{"location":"Competitive%20Probability/Place%20and%20Take/#thought-process","text":"Think of every dollar you drop in as a goldfish in a pond. Each time you \u201ctake,\u201d you scoop one of the two ponds at random, so any given goldfish has a 1/2 chance of getting caught. If you plan to scoop k times, the chance a goldfish eventually gets caught is $$ 1 - (\\frac{1}{2})^k $$ How? Probability of not getting caught in \\(k\\) attempts = \\((1/2)^k\\) Probability of getting caught atleast once = \\(1 - (1/2)^k\\) You take \\(k\\) attempts so you place \\(100-k\\) attempts. So payoff function: $$ (100-k)(1 - (\\frac{1}{2})^k) $$ Maximise this payoff as: \\[ \\text{arg max}_k (100-k)(1 - 0.5^k) \\] Differential it wrt \\(k\\) and set the derivative to 0. \\[ \\begin{aligned} \\text{Let} \\ u &= 1-0.5^k \\\\ du/dk &= k0.5^{k-1} \\\\ \\end{aligned} \\] \\[ \\begin{aligned} \\text{Let} \\ v &= 100-k \\\\ du/dv &= -1 \\\\ \\end{aligned} \\] $$ \\begin{aligned} 0.5^k -1 + k0.5^{k-1}(100-k) = 0 \\ 0.5^k + 2k0.5^{k}(100-k) = 1 \\ \\text{Let} \\ 0.5^k = T \\ T - 200kT - 2k^2T =1 \\end{aligned} $$","title":"Thought Process"},{"location":"extensions/admonition/","text":"The Admonition extension adds rST-style admonitions to Markdown documents. Configuration 1 2 3 4 # mkdocs.yml markdown_extensions : - admonition Syntax :::md {.light} !!! info \"Information:\" Something **new** is coming to `mkdocs-shadcn` !!! note \"Note:\" We notice that `x=2` !!! warning \"Warning:\" There is a *risk* doing `x/0` !!! danger \"Danger:\" Don't look at `node_modules` **please**! Information: Something new is coming to mkdocs-shadcn Note: We notice that x=2 Warning: There is a risk doing x/0 Danger: Don't look at node_modules please ! Code You cannot use fenced_code inside admonition since: Fenced Code Blocks are only supported at the document root level ( source ) Currently, only codehilite can be nested inside admonition, like in the example below. 1 2 3 4 5 6 7 8 9 10 11 12 !!! note \"Admonition + Code\" You may face the limits of `codehilite` however. :::python def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num) Admonition + Code You may face the limits of codehilite however. :::python def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num)","title":"Admonitions"},{"location":"extensions/admonition/#configuration","text":"1 2 3 4 # mkdocs.yml markdown_extensions : - admonition","title":"Configuration"},{"location":"extensions/admonition/#syntax","text":":::md {.light} !!! info \"Information:\" Something **new** is coming to `mkdocs-shadcn` !!! note \"Note:\" We notice that `x=2` !!! warning \"Warning:\" There is a *risk* doing `x/0` !!! danger \"Danger:\" Don't look at `node_modules` **please**! Information: Something new is coming to mkdocs-shadcn Note: We notice that x=2 Warning: There is a risk doing x/0 Danger: Don't look at node_modules please !","title":"Syntax"},{"location":"extensions/admonition/#code","text":"You cannot use fenced_code inside admonition since: Fenced Code Blocks are only supported at the document root level ( source ) Currently, only codehilite can be nested inside admonition, like in the example below. 1 2 3 4 5 6 7 8 9 10 11 12 !!! note \"Admonition + Code\" You may face the limits of `codehilite` however. :::python def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num) Admonition + Code You may face the limits of codehilite however. :::python def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num)","title":"Code"},{"location":"extensions/attribute_lists/","text":"The attr_list extension is a feature of Python-Markdown that allows you to add custom attributes to HTML elements generated from Markdown. Configuration 1 2 3 4 # mkdocs.yml markdown_extensions : - attr_list Syntax The theme may provide some pre-computed classes. The attr_list extension (with extra ) allows to customize the attribute of the output html. Here is a example with the reference class. 1 [ Reference ]( https://python-markdown.github.io/extensions/attr_list/ ){: class=\"reference\" } Reference","title":"Attribute Lists"},{"location":"extensions/attribute_lists/#configuration","text":"1 2 3 4 # mkdocs.yml markdown_extensions : - attr_list","title":"Configuration"},{"location":"extensions/attribute_lists/#syntax","text":"The theme may provide some pre-computed classes. The attr_list extension (with extra ) allows to customize the attribute of the output html. Here is a example with the reference class. 1 [ Reference ]( https://python-markdown.github.io/extensions/attr_list/ ){: class=\"reference\" } Reference","title":"Syntax"},{"location":"extensions/codehilite/","text":"The CodeHilite extension adds code/syntax highlighting to standard Python-Markdown code blocks using Pygments . Configuration 1 2 3 4 # mkdocs.yml markdown_extensions : - codehilite Syntax With the colon syntax (don't forget to indent the block). :::md :::python import numpy as np or backticks syntax 1 2 3 ```python import numpy as np ``` 1 import numpy as np both give :::python import numpy as np","title":"Codehilite"},{"location":"extensions/codehilite/#configuration","text":"1 2 3 4 # mkdocs.yml markdown_extensions : - codehilite","title":"Configuration"},{"location":"extensions/codehilite/#syntax","text":"With the colon syntax (don't forget to indent the block). :::md :::python import numpy as np or backticks syntax 1 2 3 ```python import numpy as np ``` 1 import numpy as np both give :::python import numpy as np","title":"Syntax"},{"location":"extensions/echarts/","text":"The theme provides an alpha version of an echarts extensions, allowing to render charts based on the provided options. Configuration 1 2 3 4 # mkdocs.yml markdown_extensions : - shadcn.extensions.echarts.alpha Syntax From a js config it basically plots charts through the Apache ECharts library. The extension uses the PyMdown Blocks Extension API so its syntax (similar to tab or details ). 1 2 3 4 5 /// echarts { /* echarts js config */ } /// Currently, the extension does not support dark mode. Important The js config is passed to the .setOption method. The extension crops the input so that it keeps the outtermost curly braces ( { and } ) and removes what is outside. You can look at the library API . In a nutshell, it removes code outside of the config object. Tip You can either inline all the config within the block or insert snippets from file thanks to the pymdownx.snippets extension . /// echarts \u2013\u20138<-- \"example.js\" /// Options You can pass attributes to the chart container through the builtin attrs key. The attributes are passed to the div element that contains the chart. In addition e expose a renderer key that defines the output format of the chart ( svg or canvas ). The default values are given below. 1 2 3 4 5 6 7 8 /// echarts renderer: \"svg\" attrs: class: \"echarts\" style: \"width:100%;height:500px;\" /* config here */ /// In the following example we use the canvas renderer and re-define style to width:100%;height:60vh; (note also that it resizes with the window). Output const targetvX3bhJ = document.getElementById('vX3bhJ'); const chartvX3bhJ = echarts.init(targetvX3bhJ, 'shadcn', { renderer: 'canvas' }); chartvX3bhJ.setOption({ tooltip: { trigger: \"none\", axisPointer: { type: \"cross\", }, }, legend: {}, grid: { top: 70, bottom: 50, }, xAxis: [ { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2016-1\", \"2016-2\", \"2016-3\", \"2016-4\", \"2016-5\", \"2016-6\", \"2016-7\", \"2016-8\", \"2016-9\", \"2016-10\", \"2016-11\", \"2016-12\", ], }, { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2015-1\", \"2015-2\", \"2015-3\", \"2015-4\", \"2015-5\", \"2015-6\", \"2015-7\", \"2015-8\", \"2015-9\", \"2015-10\", \"2015-11\", \"2015-12\", ], }, ], yAxis: [ { type: \"value\", }, ], series: [ { name: \"Precipitation(2015)\", type: \"line\", xAxisIndex: 1, smooth: true, emphasis: { focus: \"series\", }, data: [ 2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3, ], }, { name: \"Precipitation(2016)\", type: \"line\", smooth: true, emphasis: { focus: \"series\", }, data: [ 3.9, 5.9, 11.1, 18.7, 48.3, 69.2, 231.6, 46.6, 55.4, 18.4, 10.3, 0.7, ], }, ], }); window.addEventListener('resize', function() { chartvX3bhJ.resize(); }); const observervX3bhJ = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { chartvX3bhJ.resize(); observervX3bhJ.disconnect(); // Stop observing if you want a one-time trigger } }); }); observervX3bhJ.observe(targetvX3bhJ); Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 /// echarts renderer: \"canvas\" attrs: style: \"width:100%;height:60vh;\" const option = { tooltip: { trigger: \"none\", axisPointer: { type: \"cross\", }, }, legend: {}, grid: { top: 70, bottom: 50, }, xAxis: [ { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2016-1\", \"2016-2\", \"2016-3\", \"2016-4\", \"2016-5\", \"2016-6\", \"2016-7\", \"2016-8\", \"2016-9\", \"2016-10\", \"2016-11\", \"2016-12\", ], }, { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2015-1\", \"2015-2\", \"2015-3\", \"2015-4\", \"2015-5\", \"2015-6\", \"2015-7\", \"2015-8\", \"2015-9\", \"2015-10\", \"2015-11\", \"2015-12\", ], }, ], yAxis: [ { type: \"value\", }, ], series: [ { name: \"Precipitation(2015)\", type: \"line\", xAxisIndex: 1, smooth: true, emphasis: { focus: \"series\", }, data: [ 2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3, ], }, { name: \"Precipitation(2016)\", type: \"line\", smooth: true, emphasis: { focus: \"series\", }, data: [ 3.9, 5.9, 11.1, 18.7, 48.3, 69.2, 231.6, 46.6, 55.4, 18.4, 10.3, 0.7, ], }, ], }; /// Examples Line Output const targetk9vZNz = document.getElementById('k9vZNz'); const chartk9vZNz = echarts.init(targetk9vZNz, 'shadcn', { renderer: 'svg' }); chartk9vZNz.setOption({ tooltip: { trigger: \"none\", axisPointer: { type: \"cross\", }, }, legend: {}, grid: { top: 70, bottom: 50, }, xAxis: [ { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2016-1\", \"2016-2\", \"2016-3\", \"2016-4\", \"2016-5\", \"2016-6\", \"2016-7\", \"2016-8\", \"2016-9\", \"2016-10\", \"2016-11\", \"2016-12\", ], }, { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2015-1\", \"2015-2\", \"2015-3\", \"2015-4\", \"2015-5\", \"2015-6\", \"2015-7\", \"2015-8\", \"2015-9\", \"2015-10\", \"2015-11\", \"2015-12\", ], }, ], yAxis: [ { type: \"value\", }, ], series: [ { name: \"Precipitation(2015)\", type: \"line\", xAxisIndex: 1, smooth: true, emphasis: { focus: \"series\", }, data: [ 2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3, ], }, { name: \"Precipitation(2016)\", type: \"line\", smooth: true, emphasis: { focus: \"series\", }, data: [ 3.9, 5.9, 11.1, 18.7, 48.3, 69.2, 231.6, 46.6, 55.4, 18.4, 10.3, 0.7, ], }, ], }); window.addEventListener('resize', function() { chartk9vZNz.resize(); }); const observerk9vZNz = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { chartk9vZNz.resize(); observerk9vZNz.disconnect(); // Stop observing if you want a one-time trigger } }); }); observerk9vZNz.observe(targetk9vZNz); Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 /// echarts const option = { tooltip: { trigger: \"none\", axisPointer: { type: \"cross\", }, }, legend: {}, grid: { top: 70, bottom: 50, }, xAxis: [ { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2016-1\", \"2016-2\", \"2016-3\", \"2016-4\", \"2016-5\", \"2016-6\", \"2016-7\", \"2016-8\", \"2016-9\", \"2016-10\", \"2016-11\", \"2016-12\", ], }, { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2015-1\", \"2015-2\", \"2015-3\", \"2015-4\", \"2015-5\", \"2015-6\", \"2015-7\", \"2015-8\", \"2015-9\", \"2015-10\", \"2015-11\", \"2015-12\", ], }, ], yAxis: [ { type: \"value\", }, ], series: [ { name: \"Precipitation(2015)\", type: \"line\", xAxisIndex: 1, smooth: true, emphasis: { focus: \"series\", }, data: [ 2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3, ], }, { name: \"Precipitation(2016)\", type: \"line\", smooth: true, emphasis: { focus: \"series\", }, data: [ 3.9, 5.9, 11.1, 18.7, 48.3, 69.2, 231.6, 46.6, 55.4, 18.4, 10.3, 0.7, ], }, ], }; /// Bars Output const targetG8PSq2 = document.getElementById('G8PSq2'); const chartG8PSq2 = echarts.init(targetG8PSq2, 'shadcn', { renderer: 'svg' }); chartG8PSq2.setOption({ legend: { data: [\"bar\", \"bar2\", \"bar3\", \"bar4\"], left: \"10%\", }, brush: { toolbox: [\"rect\", \"polygon\", \"lineX\", \"lineY\", \"keep\", \"clear\"], xAxisIndex: 0, }, toolbox: { feature: { magicType: { type: [\"stack\"], }, dataView: {}, }, }, tooltip: {}, xAxis: { data: (() => { let xAxisData = []; for (let i = 0; i < 10; i++) { xAxisData.push(\"Class\" + i); } return xAxisData; })(), name: \"X Axis\", axisLine: { onZero: true }, splitLine: { show: false }, splitArea: { show: false }, }, yAxis: {}, grid: { bottom: 100, }, series: [ { name: \"bar\", type: \"bar\", stack: \"one\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data1 = []; for (let i = 0; i < 10; i++) { data1.push(+(Math.random() * 2).toFixed(2)); } return data1; })(), }, { name: \"bar2\", type: \"bar\", stack: \"one\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data2 = []; for (let i = 0; i < 10; i++) { data2.push(+(Math.random() * 5).toFixed(2)); } return data2; })(), }, { name: \"bar3\", type: \"bar\", stack: \"two\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data3 = []; for (let i = 0; i < 10; i++) { data3.push(+(Math.random() + 0.3).toFixed(2)); } return data3; })(), }, { name: \"bar4\", type: \"bar\", stack: \"two\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data4 = []; for (let i = 0; i < 10; i++) { data4.push(+Math.random().toFixed(2)); } return data4; })(), }, ], }); window.addEventListener('resize', function() { chartG8PSq2.resize(); }); const observerG8PSq2 = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { chartG8PSq2.resize(); observerG8PSq2.disconnect(); // Stop observing if you want a one-time trigger } }); }); observerG8PSq2.observe(targetG8PSq2); Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 /// echarts const option = { legend: { data: [\"bar\", \"bar2\", \"bar3\", \"bar4\"], left: \"10%\", }, brush: { toolbox: [\"rect\", \"polygon\", \"lineX\", \"lineY\", \"keep\", \"clear\"], xAxisIndex: 0, }, toolbox: { feature: { magicType: { type: [\"stack\"], }, dataView: {}, }, }, tooltip: {}, xAxis: { data: (() => { let xAxisData = []; for (let i = 0; i < 10; i++) { xAxisData.push(\"Class\" + i); } return xAxisData; })(), name: \"X Axis\", axisLine: { onZero: true }, splitLine: { show: false }, splitArea: { show: false }, }, yAxis: {}, grid: { bottom: 100, }, series: [ { name: \"bar\", type: \"bar\", stack: \"one\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data1 = []; for (let i = 0; i < 10; i++) { data1.push(+(Math.random() * 2).toFixed(2)); } return data1; })(), }, { name: \"bar2\", type: \"bar\", stack: \"one\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data2 = []; for (let i = 0; i < 10; i++) { data2.push(+(Math.random() * 5).toFixed(2)); } return data2; })(), }, { name: \"bar3\", type: \"bar\", stack: \"two\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data3 = []; for (let i = 0; i < 10; i++) { data3.push(+(Math.random() + 0.3).toFixed(2)); } return data3; })(), }, { name: \"bar4\", type: \"bar\", stack: \"two\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data4 = []; for (let i = 0; i < 10; i++) { data4.push(+Math.random().toFixed(2)); } return data4; })(), }, ], }; /// Pie Output const targetCgwgDX = document.getElementById('CgwgDX'); const chartCgwgDX = echarts.init(targetCgwgDX, 'shadcn', { renderer: 'svg' }); chartCgwgDX.setOption({ tooltip: { trigger: \"item\", }, legend: { top: \"5%\", left: \"center\", }, series: [ { name: \"Access From\", type: \"pie\", radius: [\"40%\", \"70%\"], avoidLabelOverlap: false, itemStyle: { borderRadius: 10, borderColor: \"#fff\", borderWidth: 2, }, label: { show: false, position: \"center\", }, emphasis: { label: { show: true, fontSize: 40, fontWeight: \"bold\", }, }, labelLine: { show: false, }, data: [ { value: 1048, name: \"Search Engine\" }, { value: 735, name: \"Direct\" }, { value: 580, name: \"Email\" }, { value: 484, name: \"Union Ads\" }, { value: 300, name: \"Video Ads\" }, ], }, ], }); window.addEventListener('resize', function() { chartCgwgDX.resize(); }); const observerCgwgDX = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { chartCgwgDX.resize(); observerCgwgDX.disconnect(); // Stop observing if you want a one-time trigger } }); }); observerCgwgDX.observe(targetCgwgDX); Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /// echarts const option = { tooltip: { trigger: \"item\", }, legend: { top: \"5%\", left: \"center\", }, series: [ { name: \"Access From\", type: \"pie\", radius: [\"40%\", \"70%\"], avoidLabelOverlap: false, itemStyle: { borderRadius: 10, borderColor: \"#fff\", borderWidth: 2, }, label: { show: false, position: \"center\", }, emphasis: { label: { show: true, fontSize: 40, fontWeight: \"bold\", }, }, labelLine: { show: false, }, data: [ { value: 1048, name: \"Search Engine\" }, { value: 735, name: \"Direct\" }, { value: 580, name: \"Email\" }, { value: 484, name: \"Union Ads\" }, { value: 300, name: \"Video Ads\" }, ], }, ], }; /// Scatter Output const targetXMLHSG = document.getElementById('XMLHSG'); const chartXMLHSG = echarts.init(targetXMLHSG, 'shadcn', { renderer: 'svg' }); chartXMLHSG.setOption({ xAxis: { scale: true, }, yAxis: { scale: true, }, series: [ { type: \"effectScatter\", symbolSize: 20, data: [ [172.7, 105.2], [153.4, 42], ], }, { type: \"scatter\", // prettier-ignore data: [[161.2, 51.6], [167.5, 59.0], [159.5, 49.2], [157.0, 63.0], [155.8, 53.6], [170.0, 59.0], [159.1, 47.6], [166.0, 69.8], [176.2, 66.8], [160.2, 75.2], [172.5, 55.2], [170.9, 54.2], [172.9, 62.5], [153.4, 42.0], [160.0, 50.0], [147.2, 49.8], [168.2, 49.2], [175.0, 73.2], [157.0, 47.8], [167.6, 68.8], [159.5, 50.6], [175.0, 82.5], [166.8, 57.2], [176.5, 87.8], [170.2, 72.8], [174.0, 54.5], [173.0, 59.8], [179.9, 67.3], [170.5, 67.8], [160.0, 47.0], [154.4, 46.2], [162.0, 55.0], [176.5, 83.0], [160.0, 54.4], [152.0, 45.8], [162.1, 53.6], [170.0, 73.2], [160.2, 52.1], [161.3, 67.9], [166.4, 56.6], [168.9, 62.3], [163.8, 58.5], [167.6, 54.5], [160.0, 50.2], [161.3, 60.3], [167.6, 58.3], [165.1, 56.2], [160.0, 50.2], [170.0, 72.9], [157.5, 59.8], [167.6, 61.0], [160.7, 69.1], [163.2, 55.9], [152.4, 46.5], [157.5, 54.3], [168.3, 54.8], [180.3, 60.7], [165.5, 60.0], [165.0, 62.0], [164.5, 60.3], [156.0, 52.7], [160.0, 74.3], [163.0, 62.0], [165.7, 73.1], [161.0, 80.0], [162.0, 54.7], [166.0, 53.2], [174.0, 75.7], [172.7, 61.1], [167.6, 55.7], [151.1, 48.7], [164.5, 52.3], [163.5, 50.0], [152.0, 59.3], [169.0, 62.5], [164.0, 55.7], [161.2, 54.8], [155.0, 45.9], [170.0, 70.6], [176.2, 67.2], [170.0, 69.4], [162.5, 58.2], [170.3, 64.8], [164.1, 71.6], [169.5, 52.8], [163.2, 59.8], [154.5, 49.0], [159.8, 50.0], [173.2, 69.2], [170.0, 55.9], [161.4, 63.4], [169.0, 58.2], [166.2, 58.6], [159.4, 45.7], [162.5, 52.2], [159.0, 48.6], [162.8, 57.8], [159.0, 55.6], [179.8, 66.8], [162.9, 59.4], [161.0, 53.6], [151.1, 73.2], [168.2, 53.4], [168.9, 69.0], [173.2, 58.4], [171.8, 56.2], [178.0, 70.6], [164.3, 59.8], [163.0, 72.0], [168.5, 65.2], [166.8, 56.6], [172.7, 105.2], [163.5, 51.8], [169.4, 63.4], [167.8, 59.0], [159.5, 47.6], [167.6, 63.0], [161.2, 55.2], [160.0, 45.0], [163.2, 54.0], [162.2, 50.2], [161.3, 60.2], [149.5, 44.8], [157.5, 58.8], [163.2, 56.4], [172.7, 62.0], [155.0, 49.2], [156.5, 67.2], [164.0, 53.8], [160.9, 54.4], [162.8, 58.0], [167.0, 59.8], [160.0, 54.8], [160.0, 43.2], [168.9, 60.5], [158.2, 46.4], [156.0, 64.4], [160.0, 48.8], [167.1, 62.2], [158.0, 55.5], [167.6, 57.8], [156.0, 54.6], [162.1, 59.2], [173.4, 52.7], [159.8, 53.2], [170.5, 64.5], [159.2, 51.8], [157.5, 56.0], [161.3, 63.6], [162.6, 63.2], [160.0, 59.5], [168.9, 56.8], [165.1, 64.1], [162.6, 50.0], [165.1, 72.3], [166.4, 55.0], [160.0, 55.9], [152.4, 60.4], [170.2, 69.1], [162.6, 84.5], [170.2, 55.9], [158.8, 55.5], [172.7, 69.5], [167.6, 76.4], [162.6, 61.4], [167.6, 65.9], [156.2, 58.6], [175.2, 66.8], [172.1, 56.6], [162.6, 58.6], [160.0, 55.9], [165.1, 59.1], [182.9, 81.8], [166.4, 70.7], [165.1, 56.8], [177.8, 60.0], [165.1, 58.2], [175.3, 72.7], [154.9, 54.1], [158.8, 49.1], [172.7, 75.9], [168.9, 55.0], [161.3, 57.3], [167.6, 55.0], [165.1, 65.5], [175.3, 65.5], [157.5, 48.6], [163.8, 58.6], [167.6, 63.6], [165.1, 55.2], [165.1, 62.7], [168.9, 56.6], [162.6, 53.9], [164.5, 63.2], [176.5, 73.6], [168.9, 62.0], [175.3, 63.6], [159.4, 53.2], [160.0, 53.4], [170.2, 55.0], [162.6, 70.5], [167.6, 54.5], [162.6, 54.5], [160.7, 55.9], [160.0, 59.0], [157.5, 63.6], [162.6, 54.5], [152.4, 47.3], [170.2, 67.7], [165.1, 80.9], [172.7, 70.5], [165.1, 60.9], [170.2, 63.6], [170.2, 54.5], [170.2, 59.1], [161.3, 70.5], [167.6, 52.7], [167.6, 62.7], [165.1, 86.3], [162.6, 66.4], [152.4, 67.3], [168.9, 63.0], [170.2, 73.6], [175.2, 62.3], [175.2, 57.7], [160.0, 55.4], [165.1, 104.1], [174.0, 55.5], [170.2, 77.3], [160.0, 80.5], [167.6, 64.5], [167.6, 72.3], [167.6, 61.4], [154.9, 58.2], [162.6, 81.8], [175.3, 63.6], [171.4, 53.4], [157.5, 54.5], [165.1, 53.6], [160.0, 60.0], [174.0, 73.6], [162.6, 61.4], [174.0, 55.5], [162.6, 63.6], [161.3, 60.9], [156.2, 60.0], [149.9, 46.8], [169.5, 57.3], [160.0, 64.1], [175.3, 63.6], [169.5, 67.3], [160.0, 75.5], [172.7, 68.2], [162.6, 61.4], [157.5, 76.8], [176.5, 71.8], [164.4, 55.5], [160.7, 48.6], [174.0, 66.4], [163.8, 67.3] ], }, ], }); window.addEventListener('resize', function() { chartXMLHSG.resize(); }); const observerXMLHSG = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { chartXMLHSG.resize(); observerXMLHSG.disconnect(); // Stop observing if you want a one-time trigger } }); }); observerXMLHSG.observe(targetXMLHSG); Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 /// echarts const option = { xAxis: { scale: true, }, yAxis: { scale: true, }, series: [ { type: \"effectScatter\", symbolSize: 20, data: [ [172.7, 105.2], [153.4, 42], ], }, { type: \"scatter\", // prettier-ignore data: [[161.2, 51.6], [167.5, 59.0], [159.5, 49.2], [157.0, 63.0], [155.8, 53.6], [170.0, 59.0], [159.1, 47.6], [166.0, 69.8], [176.2, 66.8], [160.2, 75.2], [172.5, 55.2], [170.9, 54.2], [172.9, 62.5], [153.4, 42.0], [160.0, 50.0], [147.2, 49.8], [168.2, 49.2], [175.0, 73.2], [157.0, 47.8], [167.6, 68.8], [159.5, 50.6], [175.0, 82.5], [166.8, 57.2], [176.5, 87.8], [170.2, 72.8], [174.0, 54.5], [173.0, 59.8], [179.9, 67.3], [170.5, 67.8], [160.0, 47.0], [154.4, 46.2], [162.0, 55.0], [176.5, 83.0], [160.0, 54.4], [152.0, 45.8], [162.1, 53.6], [170.0, 73.2], [160.2, 52.1], [161.3, 67.9], [166.4, 56.6], [168.9, 62.3], [163.8, 58.5], [167.6, 54.5], [160.0, 50.2], [161.3, 60.3], [167.6, 58.3], [165.1, 56.2], [160.0, 50.2], [170.0, 72.9], [157.5, 59.8], [167.6, 61.0], [160.7, 69.1], [163.2, 55.9], [152.4, 46.5], [157.5, 54.3], [168.3, 54.8], [180.3, 60.7], [165.5, 60.0], [165.0, 62.0], [164.5, 60.3], [156.0, 52.7], [160.0, 74.3], [163.0, 62.0], [165.7, 73.1], [161.0, 80.0], [162.0, 54.7], [166.0, 53.2], [174.0, 75.7], [172.7, 61.1], [167.6, 55.7], [151.1, 48.7], [164.5, 52.3], [163.5, 50.0], [152.0, 59.3], [169.0, 62.5], [164.0, 55.7], [161.2, 54.8], [155.0, 45.9], [170.0, 70.6], [176.2, 67.2], [170.0, 69.4], [162.5, 58.2], [170.3, 64.8], [164.1, 71.6], [169.5, 52.8], [163.2, 59.8], [154.5, 49.0], [159.8, 50.0], [173.2, 69.2], [170.0, 55.9], [161.4, 63.4], [169.0, 58.2], [166.2, 58.6], [159.4, 45.7], [162.5, 52.2], [159.0, 48.6], [162.8, 57.8], [159.0, 55.6], [179.8, 66.8], [162.9, 59.4], [161.0, 53.6], [151.1, 73.2], [168.2, 53.4], [168.9, 69.0], [173.2, 58.4], [171.8, 56.2], [178.0, 70.6], [164.3, 59.8], [163.0, 72.0], [168.5, 65.2], [166.8, 56.6], [172.7, 105.2], [163.5, 51.8], [169.4, 63.4], [167.8, 59.0], [159.5, 47.6], [167.6, 63.0], [161.2, 55.2], [160.0, 45.0], [163.2, 54.0], [162.2, 50.2], [161.3, 60.2], [149.5, 44.8], [157.5, 58.8], [163.2, 56.4], [172.7, 62.0], [155.0, 49.2], [156.5, 67.2], [164.0, 53.8], [160.9, 54.4], [162.8, 58.0], [167.0, 59.8], [160.0, 54.8], [160.0, 43.2], [168.9, 60.5], [158.2, 46.4], [156.0, 64.4], [160.0, 48.8], [167.1, 62.2], [158.0, 55.5], [167.6, 57.8], [156.0, 54.6], [162.1, 59.2], [173.4, 52.7], [159.8, 53.2], [170.5, 64.5], [159.2, 51.8], [157.5, 56.0], [161.3, 63.6], [162.6, 63.2], [160.0, 59.5], [168.9, 56.8], [165.1, 64.1], [162.6, 50.0], [165.1, 72.3], [166.4, 55.0], [160.0, 55.9], [152.4, 60.4], [170.2, 69.1], [162.6, 84.5], [170.2, 55.9], [158.8, 55.5], [172.7, 69.5], [167.6, 76.4], [162.6, 61.4], [167.6, 65.9], [156.2, 58.6], [175.2, 66.8], [172.1, 56.6], [162.6, 58.6], [160.0, 55.9], [165.1, 59.1], [182.9, 81.8], [166.4, 70.7], [165.1, 56.8], [177.8, 60.0], [165.1, 58.2], [175.3, 72.7], [154.9, 54.1], [158.8, 49.1], [172.7, 75.9], [168.9, 55.0], [161.3, 57.3], [167.6, 55.0], [165.1, 65.5], [175.3, 65.5], [157.5, 48.6], [163.8, 58.6], [167.6, 63.6], [165.1, 55.2], [165.1, 62.7], [168.9, 56.6], [162.6, 53.9], [164.5, 63.2], [176.5, 73.6], [168.9, 62.0], [175.3, 63.6], [159.4, 53.2], [160.0, 53.4], [170.2, 55.0], [162.6, 70.5], [167.6, 54.5], [162.6, 54.5], [160.7, 55.9], [160.0, 59.0], [157.5, 63.6], [162.6, 54.5], [152.4, 47.3], [170.2, 67.7], [165.1, 80.9], [172.7, 70.5], [165.1, 60.9], [170.2, 63.6], [170.2, 54.5], [170.2, 59.1], [161.3, 70.5], [167.6, 52.7], [167.6, 62.7], [165.1, 86.3], [162.6, 66.4], [152.4, 67.3], [168.9, 63.0], [170.2, 73.6], [175.2, 62.3], [175.2, 57.7], [160.0, 55.4], [165.1, 104.1], [174.0, 55.5], [170.2, 77.3], [160.0, 80.5], [167.6, 64.5], [167.6, 72.3], [167.6, 61.4], [154.9, 58.2], [162.6, 81.8], [175.3, 63.6], [171.4, 53.4], [157.5, 54.5], [165.1, 53.6], [160.0, 60.0], [174.0, 73.6], [162.6, 61.4], [174.0, 55.5], [162.6, 63.6], [161.3, 60.9], [156.2, 60.0], [149.9, 46.8], [169.5, 57.3], [160.0, 64.1], [175.3, 63.6], [169.5, 67.3], [160.0, 75.5], [172.7, 68.2], [162.6, 61.4], [157.5, 76.8], [176.5, 71.8], [164.4, 55.5], [160.7, 48.6], [174.0, 66.4], [163.8, 67.3] ], }, ], }; /// Radar Output const targetz5Xo8P = document.getElementById('z5Xo8P'); const chartz5Xo8P = echarts.init(targetz5Xo8P, 'shadcn', { renderer: 'svg' }); chartz5Xo8P.setOption({ title: { text: \"Basic Radar Chart\", }, legend: { data: [\"Allocated Budget\", \"Actual Spending\"], }, radar: { // shape: 'circle', indicator: [ { name: \"Sales\", max: 6500 }, { name: \"Administration\", max: 16000 }, { name: \"Information Technology\", max: 30000 }, { name: \"Customer Support\", max: 38000 }, { name: \"Development\", max: 52000 }, { name: \"Marketing\", max: 25000 }, ], }, series: [ { name: \"Budget vs spending\", type: \"radar\", data: [ { value: [4200, 3000, 20000, 35000, 50000, 18000], name: \"Allocated Budget\", }, { value: [5000, 14000, 28000, 26000, 42000, 21000], name: \"Actual Spending\", }, ], }, ], }); window.addEventListener('resize', function() { chartz5Xo8P.resize(); }); const observerz5Xo8P = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { chartz5Xo8P.resize(); observerz5Xo8P.disconnect(); // Stop observing if you want a one-time trigger } }); }); observerz5Xo8P.observe(targetz5Xo8P); Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /// echarts const option = { title: { text: \"Basic Radar Chart\", }, legend: { data: [\"Allocated Budget\", \"Actual Spending\"], }, radar: { // shape: 'circle', indicator: [ { name: \"Sales\", max: 6500 }, { name: \"Administration\", max: 16000 }, { name: \"Information Technology\", max: 30000 }, { name: \"Customer Support\", max: 38000 }, { name: \"Development\", max: 52000 }, { name: \"Marketing\", max: 25000 }, ], }, series: [ { name: \"Budget vs spending\", type: \"radar\", data: [ { value: [4200, 3000, 20000, 35000, 50000, 18000], name: \"Allocated Budget\", }, { value: [5000, 14000, 28000, 26000, 42000, 21000], name: \"Actual Spending\", }, ], }, ], }; ///","title":"Apache ECharts"},{"location":"extensions/echarts/#configuration","text":"1 2 3 4 # mkdocs.yml markdown_extensions : - shadcn.extensions.echarts.alpha","title":"Configuration"},{"location":"extensions/echarts/#syntax","text":"From a js config it basically plots charts through the Apache ECharts library. The extension uses the PyMdown Blocks Extension API so its syntax (similar to tab or details ). 1 2 3 4 5 /// echarts { /* echarts js config */ } /// Currently, the extension does not support dark mode. Important The js config is passed to the .setOption method. The extension crops the input so that it keeps the outtermost curly braces ( { and } ) and removes what is outside. You can look at the library API . In a nutshell, it removes code outside of the config object. Tip You can either inline all the config within the block or insert snippets from file thanks to the pymdownx.snippets extension . /// echarts \u2013\u20138<-- \"example.js\" ///","title":"Syntax"},{"location":"extensions/echarts/#options","text":"You can pass attributes to the chart container through the builtin attrs key. The attributes are passed to the div element that contains the chart. In addition e expose a renderer key that defines the output format of the chart ( svg or canvas ). The default values are given below. 1 2 3 4 5 6 7 8 /// echarts renderer: \"svg\" attrs: class: \"echarts\" style: \"width:100%;height:500px;\" /* config here */ /// In the following example we use the canvas renderer and re-define style to width:100%;height:60vh; (note also that it resizes with the window). Output const targetvX3bhJ = document.getElementById('vX3bhJ'); const chartvX3bhJ = echarts.init(targetvX3bhJ, 'shadcn', { renderer: 'canvas' }); chartvX3bhJ.setOption({ tooltip: { trigger: \"none\", axisPointer: { type: \"cross\", }, }, legend: {}, grid: { top: 70, bottom: 50, }, xAxis: [ { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2016-1\", \"2016-2\", \"2016-3\", \"2016-4\", \"2016-5\", \"2016-6\", \"2016-7\", \"2016-8\", \"2016-9\", \"2016-10\", \"2016-11\", \"2016-12\", ], }, { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2015-1\", \"2015-2\", \"2015-3\", \"2015-4\", \"2015-5\", \"2015-6\", \"2015-7\", \"2015-8\", \"2015-9\", \"2015-10\", \"2015-11\", \"2015-12\", ], }, ], yAxis: [ { type: \"value\", }, ], series: [ { name: \"Precipitation(2015)\", type: \"line\", xAxisIndex: 1, smooth: true, emphasis: { focus: \"series\", }, data: [ 2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3, ], }, { name: \"Precipitation(2016)\", type: \"line\", smooth: true, emphasis: { focus: \"series\", }, data: [ 3.9, 5.9, 11.1, 18.7, 48.3, 69.2, 231.6, 46.6, 55.4, 18.4, 10.3, 0.7, ], }, ], }); window.addEventListener('resize', function() { chartvX3bhJ.resize(); }); const observervX3bhJ = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { chartvX3bhJ.resize(); observervX3bhJ.disconnect(); // Stop observing if you want a one-time trigger } }); }); observervX3bhJ.observe(targetvX3bhJ); Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 /// echarts renderer: \"canvas\" attrs: style: \"width:100%;height:60vh;\" const option = { tooltip: { trigger: \"none\", axisPointer: { type: \"cross\", }, }, legend: {}, grid: { top: 70, bottom: 50, }, xAxis: [ { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2016-1\", \"2016-2\", \"2016-3\", \"2016-4\", \"2016-5\", \"2016-6\", \"2016-7\", \"2016-8\", \"2016-9\", \"2016-10\", \"2016-11\", \"2016-12\", ], }, { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2015-1\", \"2015-2\", \"2015-3\", \"2015-4\", \"2015-5\", \"2015-6\", \"2015-7\", \"2015-8\", \"2015-9\", \"2015-10\", \"2015-11\", \"2015-12\", ], }, ], yAxis: [ { type: \"value\", }, ], series: [ { name: \"Precipitation(2015)\", type: \"line\", xAxisIndex: 1, smooth: true, emphasis: { focus: \"series\", }, data: [ 2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3, ], }, { name: \"Precipitation(2016)\", type: \"line\", smooth: true, emphasis: { focus: \"series\", }, data: [ 3.9, 5.9, 11.1, 18.7, 48.3, 69.2, 231.6, 46.6, 55.4, 18.4, 10.3, 0.7, ], }, ], }; ///","title":"Options"},{"location":"extensions/echarts/#examples","text":"","title":"Examples"},{"location":"extensions/echarts/#line","text":"Output const targetk9vZNz = document.getElementById('k9vZNz'); const chartk9vZNz = echarts.init(targetk9vZNz, 'shadcn', { renderer: 'svg' }); chartk9vZNz.setOption({ tooltip: { trigger: \"none\", axisPointer: { type: \"cross\", }, }, legend: {}, grid: { top: 70, bottom: 50, }, xAxis: [ { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2016-1\", \"2016-2\", \"2016-3\", \"2016-4\", \"2016-5\", \"2016-6\", \"2016-7\", \"2016-8\", \"2016-9\", \"2016-10\", \"2016-11\", \"2016-12\", ], }, { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2015-1\", \"2015-2\", \"2015-3\", \"2015-4\", \"2015-5\", \"2015-6\", \"2015-7\", \"2015-8\", \"2015-9\", \"2015-10\", \"2015-11\", \"2015-12\", ], }, ], yAxis: [ { type: \"value\", }, ], series: [ { name: \"Precipitation(2015)\", type: \"line\", xAxisIndex: 1, smooth: true, emphasis: { focus: \"series\", }, data: [ 2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3, ], }, { name: \"Precipitation(2016)\", type: \"line\", smooth: true, emphasis: { focus: \"series\", }, data: [ 3.9, 5.9, 11.1, 18.7, 48.3, 69.2, 231.6, 46.6, 55.4, 18.4, 10.3, 0.7, ], }, ], }); window.addEventListener('resize', function() { chartk9vZNz.resize(); }); const observerk9vZNz = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { chartk9vZNz.resize(); observerk9vZNz.disconnect(); // Stop observing if you want a one-time trigger } }); }); observerk9vZNz.observe(targetk9vZNz); Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 /// echarts const option = { tooltip: { trigger: \"none\", axisPointer: { type: \"cross\", }, }, legend: {}, grid: { top: 70, bottom: 50, }, xAxis: [ { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2016-1\", \"2016-2\", \"2016-3\", \"2016-4\", \"2016-5\", \"2016-6\", \"2016-7\", \"2016-8\", \"2016-9\", \"2016-10\", \"2016-11\", \"2016-12\", ], }, { type: \"category\", axisTick: { alignWithLabel: true, }, axisLine: { onZero: false, }, axisPointer: { label: { formatter: function (params) { return ( \"Precipitation \" + params.value + (params.seriesData.length ? \"\uff1a\" + params.seriesData[0].data : \"\") ); }, }, }, data: [ \"2015-1\", \"2015-2\", \"2015-3\", \"2015-4\", \"2015-5\", \"2015-6\", \"2015-7\", \"2015-8\", \"2015-9\", \"2015-10\", \"2015-11\", \"2015-12\", ], }, ], yAxis: [ { type: \"value\", }, ], series: [ { name: \"Precipitation(2015)\", type: \"line\", xAxisIndex: 1, smooth: true, emphasis: { focus: \"series\", }, data: [ 2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3, ], }, { name: \"Precipitation(2016)\", type: \"line\", smooth: true, emphasis: { focus: \"series\", }, data: [ 3.9, 5.9, 11.1, 18.7, 48.3, 69.2, 231.6, 46.6, 55.4, 18.4, 10.3, 0.7, ], }, ], }; ///","title":"Line"},{"location":"extensions/echarts/#bars","text":"Output const targetG8PSq2 = document.getElementById('G8PSq2'); const chartG8PSq2 = echarts.init(targetG8PSq2, 'shadcn', { renderer: 'svg' }); chartG8PSq2.setOption({ legend: { data: [\"bar\", \"bar2\", \"bar3\", \"bar4\"], left: \"10%\", }, brush: { toolbox: [\"rect\", \"polygon\", \"lineX\", \"lineY\", \"keep\", \"clear\"], xAxisIndex: 0, }, toolbox: { feature: { magicType: { type: [\"stack\"], }, dataView: {}, }, }, tooltip: {}, xAxis: { data: (() => { let xAxisData = []; for (let i = 0; i < 10; i++) { xAxisData.push(\"Class\" + i); } return xAxisData; })(), name: \"X Axis\", axisLine: { onZero: true }, splitLine: { show: false }, splitArea: { show: false }, }, yAxis: {}, grid: { bottom: 100, }, series: [ { name: \"bar\", type: \"bar\", stack: \"one\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data1 = []; for (let i = 0; i < 10; i++) { data1.push(+(Math.random() * 2).toFixed(2)); } return data1; })(), }, { name: \"bar2\", type: \"bar\", stack: \"one\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data2 = []; for (let i = 0; i < 10; i++) { data2.push(+(Math.random() * 5).toFixed(2)); } return data2; })(), }, { name: \"bar3\", type: \"bar\", stack: \"two\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data3 = []; for (let i = 0; i < 10; i++) { data3.push(+(Math.random() + 0.3).toFixed(2)); } return data3; })(), }, { name: \"bar4\", type: \"bar\", stack: \"two\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data4 = []; for (let i = 0; i < 10; i++) { data4.push(+Math.random().toFixed(2)); } return data4; })(), }, ], }); window.addEventListener('resize', function() { chartG8PSq2.resize(); }); const observerG8PSq2 = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { chartG8PSq2.resize(); observerG8PSq2.disconnect(); // Stop observing if you want a one-time trigger } }); }); observerG8PSq2.observe(targetG8PSq2); Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 /// echarts const option = { legend: { data: [\"bar\", \"bar2\", \"bar3\", \"bar4\"], left: \"10%\", }, brush: { toolbox: [\"rect\", \"polygon\", \"lineX\", \"lineY\", \"keep\", \"clear\"], xAxisIndex: 0, }, toolbox: { feature: { magicType: { type: [\"stack\"], }, dataView: {}, }, }, tooltip: {}, xAxis: { data: (() => { let xAxisData = []; for (let i = 0; i < 10; i++) { xAxisData.push(\"Class\" + i); } return xAxisData; })(), name: \"X Axis\", axisLine: { onZero: true }, splitLine: { show: false }, splitArea: { show: false }, }, yAxis: {}, grid: { bottom: 100, }, series: [ { name: \"bar\", type: \"bar\", stack: \"one\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data1 = []; for (let i = 0; i < 10; i++) { data1.push(+(Math.random() * 2).toFixed(2)); } return data1; })(), }, { name: \"bar2\", type: \"bar\", stack: \"one\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data2 = []; for (let i = 0; i < 10; i++) { data2.push(+(Math.random() * 5).toFixed(2)); } return data2; })(), }, { name: \"bar3\", type: \"bar\", stack: \"two\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data3 = []; for (let i = 0; i < 10; i++) { data3.push(+(Math.random() + 0.3).toFixed(2)); } return data3; })(), }, { name: \"bar4\", type: \"bar\", stack: \"two\", emphasis: { itemStyle: { shadowBlur: 10, shadowColor: \"rgba(0,0,0,0.3)\", }, }, data: (() => { let data4 = []; for (let i = 0; i < 10; i++) { data4.push(+Math.random().toFixed(2)); } return data4; })(), }, ], }; ///","title":"Bars"},{"location":"extensions/echarts/#pie","text":"Output const targetCgwgDX = document.getElementById('CgwgDX'); const chartCgwgDX = echarts.init(targetCgwgDX, 'shadcn', { renderer: 'svg' }); chartCgwgDX.setOption({ tooltip: { trigger: \"item\", }, legend: { top: \"5%\", left: \"center\", }, series: [ { name: \"Access From\", type: \"pie\", radius: [\"40%\", \"70%\"], avoidLabelOverlap: false, itemStyle: { borderRadius: 10, borderColor: \"#fff\", borderWidth: 2, }, label: { show: false, position: \"center\", }, emphasis: { label: { show: true, fontSize: 40, fontWeight: \"bold\", }, }, labelLine: { show: false, }, data: [ { value: 1048, name: \"Search Engine\" }, { value: 735, name: \"Direct\" }, { value: 580, name: \"Email\" }, { value: 484, name: \"Union Ads\" }, { value: 300, name: \"Video Ads\" }, ], }, ], }); window.addEventListener('resize', function() { chartCgwgDX.resize(); }); const observerCgwgDX = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { chartCgwgDX.resize(); observerCgwgDX.disconnect(); // Stop observing if you want a one-time trigger } }); }); observerCgwgDX.observe(targetCgwgDX); Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /// echarts const option = { tooltip: { trigger: \"item\", }, legend: { top: \"5%\", left: \"center\", }, series: [ { name: \"Access From\", type: \"pie\", radius: [\"40%\", \"70%\"], avoidLabelOverlap: false, itemStyle: { borderRadius: 10, borderColor: \"#fff\", borderWidth: 2, }, label: { show: false, position: \"center\", }, emphasis: { label: { show: true, fontSize: 40, fontWeight: \"bold\", }, }, labelLine: { show: false, }, data: [ { value: 1048, name: \"Search Engine\" }, { value: 735, name: \"Direct\" }, { value: 580, name: \"Email\" }, { value: 484, name: \"Union Ads\" }, { value: 300, name: \"Video Ads\" }, ], }, ], }; ///","title":"Pie"},{"location":"extensions/echarts/#scatter","text":"Output const targetXMLHSG = document.getElementById('XMLHSG'); const chartXMLHSG = echarts.init(targetXMLHSG, 'shadcn', { renderer: 'svg' }); chartXMLHSG.setOption({ xAxis: { scale: true, }, yAxis: { scale: true, }, series: [ { type: \"effectScatter\", symbolSize: 20, data: [ [172.7, 105.2], [153.4, 42], ], }, { type: \"scatter\", // prettier-ignore data: [[161.2, 51.6], [167.5, 59.0], [159.5, 49.2], [157.0, 63.0], [155.8, 53.6], [170.0, 59.0], [159.1, 47.6], [166.0, 69.8], [176.2, 66.8], [160.2, 75.2], [172.5, 55.2], [170.9, 54.2], [172.9, 62.5], [153.4, 42.0], [160.0, 50.0], [147.2, 49.8], [168.2, 49.2], [175.0, 73.2], [157.0, 47.8], [167.6, 68.8], [159.5, 50.6], [175.0, 82.5], [166.8, 57.2], [176.5, 87.8], [170.2, 72.8], [174.0, 54.5], [173.0, 59.8], [179.9, 67.3], [170.5, 67.8], [160.0, 47.0], [154.4, 46.2], [162.0, 55.0], [176.5, 83.0], [160.0, 54.4], [152.0, 45.8], [162.1, 53.6], [170.0, 73.2], [160.2, 52.1], [161.3, 67.9], [166.4, 56.6], [168.9, 62.3], [163.8, 58.5], [167.6, 54.5], [160.0, 50.2], [161.3, 60.3], [167.6, 58.3], [165.1, 56.2], [160.0, 50.2], [170.0, 72.9], [157.5, 59.8], [167.6, 61.0], [160.7, 69.1], [163.2, 55.9], [152.4, 46.5], [157.5, 54.3], [168.3, 54.8], [180.3, 60.7], [165.5, 60.0], [165.0, 62.0], [164.5, 60.3], [156.0, 52.7], [160.0, 74.3], [163.0, 62.0], [165.7, 73.1], [161.0, 80.0], [162.0, 54.7], [166.0, 53.2], [174.0, 75.7], [172.7, 61.1], [167.6, 55.7], [151.1, 48.7], [164.5, 52.3], [163.5, 50.0], [152.0, 59.3], [169.0, 62.5], [164.0, 55.7], [161.2, 54.8], [155.0, 45.9], [170.0, 70.6], [176.2, 67.2], [170.0, 69.4], [162.5, 58.2], [170.3, 64.8], [164.1, 71.6], [169.5, 52.8], [163.2, 59.8], [154.5, 49.0], [159.8, 50.0], [173.2, 69.2], [170.0, 55.9], [161.4, 63.4], [169.0, 58.2], [166.2, 58.6], [159.4, 45.7], [162.5, 52.2], [159.0, 48.6], [162.8, 57.8], [159.0, 55.6], [179.8, 66.8], [162.9, 59.4], [161.0, 53.6], [151.1, 73.2], [168.2, 53.4], [168.9, 69.0], [173.2, 58.4], [171.8, 56.2], [178.0, 70.6], [164.3, 59.8], [163.0, 72.0], [168.5, 65.2], [166.8, 56.6], [172.7, 105.2], [163.5, 51.8], [169.4, 63.4], [167.8, 59.0], [159.5, 47.6], [167.6, 63.0], [161.2, 55.2], [160.0, 45.0], [163.2, 54.0], [162.2, 50.2], [161.3, 60.2], [149.5, 44.8], [157.5, 58.8], [163.2, 56.4], [172.7, 62.0], [155.0, 49.2], [156.5, 67.2], [164.0, 53.8], [160.9, 54.4], [162.8, 58.0], [167.0, 59.8], [160.0, 54.8], [160.0, 43.2], [168.9, 60.5], [158.2, 46.4], [156.0, 64.4], [160.0, 48.8], [167.1, 62.2], [158.0, 55.5], [167.6, 57.8], [156.0, 54.6], [162.1, 59.2], [173.4, 52.7], [159.8, 53.2], [170.5, 64.5], [159.2, 51.8], [157.5, 56.0], [161.3, 63.6], [162.6, 63.2], [160.0, 59.5], [168.9, 56.8], [165.1, 64.1], [162.6, 50.0], [165.1, 72.3], [166.4, 55.0], [160.0, 55.9], [152.4, 60.4], [170.2, 69.1], [162.6, 84.5], [170.2, 55.9], [158.8, 55.5], [172.7, 69.5], [167.6, 76.4], [162.6, 61.4], [167.6, 65.9], [156.2, 58.6], [175.2, 66.8], [172.1, 56.6], [162.6, 58.6], [160.0, 55.9], [165.1, 59.1], [182.9, 81.8], [166.4, 70.7], [165.1, 56.8], [177.8, 60.0], [165.1, 58.2], [175.3, 72.7], [154.9, 54.1], [158.8, 49.1], [172.7, 75.9], [168.9, 55.0], [161.3, 57.3], [167.6, 55.0], [165.1, 65.5], [175.3, 65.5], [157.5, 48.6], [163.8, 58.6], [167.6, 63.6], [165.1, 55.2], [165.1, 62.7], [168.9, 56.6], [162.6, 53.9], [164.5, 63.2], [176.5, 73.6], [168.9, 62.0], [175.3, 63.6], [159.4, 53.2], [160.0, 53.4], [170.2, 55.0], [162.6, 70.5], [167.6, 54.5], [162.6, 54.5], [160.7, 55.9], [160.0, 59.0], [157.5, 63.6], [162.6, 54.5], [152.4, 47.3], [170.2, 67.7], [165.1, 80.9], [172.7, 70.5], [165.1, 60.9], [170.2, 63.6], [170.2, 54.5], [170.2, 59.1], [161.3, 70.5], [167.6, 52.7], [167.6, 62.7], [165.1, 86.3], [162.6, 66.4], [152.4, 67.3], [168.9, 63.0], [170.2, 73.6], [175.2, 62.3], [175.2, 57.7], [160.0, 55.4], [165.1, 104.1], [174.0, 55.5], [170.2, 77.3], [160.0, 80.5], [167.6, 64.5], [167.6, 72.3], [167.6, 61.4], [154.9, 58.2], [162.6, 81.8], [175.3, 63.6], [171.4, 53.4], [157.5, 54.5], [165.1, 53.6], [160.0, 60.0], [174.0, 73.6], [162.6, 61.4], [174.0, 55.5], [162.6, 63.6], [161.3, 60.9], [156.2, 60.0], [149.9, 46.8], [169.5, 57.3], [160.0, 64.1], [175.3, 63.6], [169.5, 67.3], [160.0, 75.5], [172.7, 68.2], [162.6, 61.4], [157.5, 76.8], [176.5, 71.8], [164.4, 55.5], [160.7, 48.6], [174.0, 66.4], [163.8, 67.3] ], }, ], }); window.addEventListener('resize', function() { chartXMLHSG.resize(); }); const observerXMLHSG = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { chartXMLHSG.resize(); observerXMLHSG.disconnect(); // Stop observing if you want a one-time trigger } }); }); observerXMLHSG.observe(targetXMLHSG); Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 /// echarts const option = { xAxis: { scale: true, }, yAxis: { scale: true, }, series: [ { type: \"effectScatter\", symbolSize: 20, data: [ [172.7, 105.2], [153.4, 42], ], }, { type: \"scatter\", // prettier-ignore data: [[161.2, 51.6], [167.5, 59.0], [159.5, 49.2], [157.0, 63.0], [155.8, 53.6], [170.0, 59.0], [159.1, 47.6], [166.0, 69.8], [176.2, 66.8], [160.2, 75.2], [172.5, 55.2], [170.9, 54.2], [172.9, 62.5], [153.4, 42.0], [160.0, 50.0], [147.2, 49.8], [168.2, 49.2], [175.0, 73.2], [157.0, 47.8], [167.6, 68.8], [159.5, 50.6], [175.0, 82.5], [166.8, 57.2], [176.5, 87.8], [170.2, 72.8], [174.0, 54.5], [173.0, 59.8], [179.9, 67.3], [170.5, 67.8], [160.0, 47.0], [154.4, 46.2], [162.0, 55.0], [176.5, 83.0], [160.0, 54.4], [152.0, 45.8], [162.1, 53.6], [170.0, 73.2], [160.2, 52.1], [161.3, 67.9], [166.4, 56.6], [168.9, 62.3], [163.8, 58.5], [167.6, 54.5], [160.0, 50.2], [161.3, 60.3], [167.6, 58.3], [165.1, 56.2], [160.0, 50.2], [170.0, 72.9], [157.5, 59.8], [167.6, 61.0], [160.7, 69.1], [163.2, 55.9], [152.4, 46.5], [157.5, 54.3], [168.3, 54.8], [180.3, 60.7], [165.5, 60.0], [165.0, 62.0], [164.5, 60.3], [156.0, 52.7], [160.0, 74.3], [163.0, 62.0], [165.7, 73.1], [161.0, 80.0], [162.0, 54.7], [166.0, 53.2], [174.0, 75.7], [172.7, 61.1], [167.6, 55.7], [151.1, 48.7], [164.5, 52.3], [163.5, 50.0], [152.0, 59.3], [169.0, 62.5], [164.0, 55.7], [161.2, 54.8], [155.0, 45.9], [170.0, 70.6], [176.2, 67.2], [170.0, 69.4], [162.5, 58.2], [170.3, 64.8], [164.1, 71.6], [169.5, 52.8], [163.2, 59.8], [154.5, 49.0], [159.8, 50.0], [173.2, 69.2], [170.0, 55.9], [161.4, 63.4], [169.0, 58.2], [166.2, 58.6], [159.4, 45.7], [162.5, 52.2], [159.0, 48.6], [162.8, 57.8], [159.0, 55.6], [179.8, 66.8], [162.9, 59.4], [161.0, 53.6], [151.1, 73.2], [168.2, 53.4], [168.9, 69.0], [173.2, 58.4], [171.8, 56.2], [178.0, 70.6], [164.3, 59.8], [163.0, 72.0], [168.5, 65.2], [166.8, 56.6], [172.7, 105.2], [163.5, 51.8], [169.4, 63.4], [167.8, 59.0], [159.5, 47.6], [167.6, 63.0], [161.2, 55.2], [160.0, 45.0], [163.2, 54.0], [162.2, 50.2], [161.3, 60.2], [149.5, 44.8], [157.5, 58.8], [163.2, 56.4], [172.7, 62.0], [155.0, 49.2], [156.5, 67.2], [164.0, 53.8], [160.9, 54.4], [162.8, 58.0], [167.0, 59.8], [160.0, 54.8], [160.0, 43.2], [168.9, 60.5], [158.2, 46.4], [156.0, 64.4], [160.0, 48.8], [167.1, 62.2], [158.0, 55.5], [167.6, 57.8], [156.0, 54.6], [162.1, 59.2], [173.4, 52.7], [159.8, 53.2], [170.5, 64.5], [159.2, 51.8], [157.5, 56.0], [161.3, 63.6], [162.6, 63.2], [160.0, 59.5], [168.9, 56.8], [165.1, 64.1], [162.6, 50.0], [165.1, 72.3], [166.4, 55.0], [160.0, 55.9], [152.4, 60.4], [170.2, 69.1], [162.6, 84.5], [170.2, 55.9], [158.8, 55.5], [172.7, 69.5], [167.6, 76.4], [162.6, 61.4], [167.6, 65.9], [156.2, 58.6], [175.2, 66.8], [172.1, 56.6], [162.6, 58.6], [160.0, 55.9], [165.1, 59.1], [182.9, 81.8], [166.4, 70.7], [165.1, 56.8], [177.8, 60.0], [165.1, 58.2], [175.3, 72.7], [154.9, 54.1], [158.8, 49.1], [172.7, 75.9], [168.9, 55.0], [161.3, 57.3], [167.6, 55.0], [165.1, 65.5], [175.3, 65.5], [157.5, 48.6], [163.8, 58.6], [167.6, 63.6], [165.1, 55.2], [165.1, 62.7], [168.9, 56.6], [162.6, 53.9], [164.5, 63.2], [176.5, 73.6], [168.9, 62.0], [175.3, 63.6], [159.4, 53.2], [160.0, 53.4], [170.2, 55.0], [162.6, 70.5], [167.6, 54.5], [162.6, 54.5], [160.7, 55.9], [160.0, 59.0], [157.5, 63.6], [162.6, 54.5], [152.4, 47.3], [170.2, 67.7], [165.1, 80.9], [172.7, 70.5], [165.1, 60.9], [170.2, 63.6], [170.2, 54.5], [170.2, 59.1], [161.3, 70.5], [167.6, 52.7], [167.6, 62.7], [165.1, 86.3], [162.6, 66.4], [152.4, 67.3], [168.9, 63.0], [170.2, 73.6], [175.2, 62.3], [175.2, 57.7], [160.0, 55.4], [165.1, 104.1], [174.0, 55.5], [170.2, 77.3], [160.0, 80.5], [167.6, 64.5], [167.6, 72.3], [167.6, 61.4], [154.9, 58.2], [162.6, 81.8], [175.3, 63.6], [171.4, 53.4], [157.5, 54.5], [165.1, 53.6], [160.0, 60.0], [174.0, 73.6], [162.6, 61.4], [174.0, 55.5], [162.6, 63.6], [161.3, 60.9], [156.2, 60.0], [149.9, 46.8], [169.5, 57.3], [160.0, 64.1], [175.3, 63.6], [169.5, 67.3], [160.0, 75.5], [172.7, 68.2], [162.6, 61.4], [157.5, 76.8], [176.5, 71.8], [164.4, 55.5], [160.7, 48.6], [174.0, 66.4], [163.8, 67.3] ], }, ], }; ///","title":"Scatter"},{"location":"extensions/echarts/#radar","text":"Output const targetz5Xo8P = document.getElementById('z5Xo8P'); const chartz5Xo8P = echarts.init(targetz5Xo8P, 'shadcn', { renderer: 'svg' }); chartz5Xo8P.setOption({ title: { text: \"Basic Radar Chart\", }, legend: { data: [\"Allocated Budget\", \"Actual Spending\"], }, radar: { // shape: 'circle', indicator: [ { name: \"Sales\", max: 6500 }, { name: \"Administration\", max: 16000 }, { name: \"Information Technology\", max: 30000 }, { name: \"Customer Support\", max: 38000 }, { name: \"Development\", max: 52000 }, { name: \"Marketing\", max: 25000 }, ], }, series: [ { name: \"Budget vs spending\", type: \"radar\", data: [ { value: [4200, 3000, 20000, 35000, 50000, 18000], name: \"Allocated Budget\", }, { value: [5000, 14000, 28000, 26000, 42000, 21000], name: \"Actual Spending\", }, ], }, ], }); window.addEventListener('resize', function() { chartz5Xo8P.resize(); }); const observerz5Xo8P = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { chartz5Xo8P.resize(); observerz5Xo8P.disconnect(); // Stop observing if you want a one-time trigger } }); }); observerz5Xo8P.observe(targetz5Xo8P); Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /// echarts const option = { title: { text: \"Basic Radar Chart\", }, legend: { data: [\"Allocated Budget\", \"Actual Spending\"], }, radar: { // shape: 'circle', indicator: [ { name: \"Sales\", max: 6500 }, { name: \"Administration\", max: 16000 }, { name: \"Information Technology\", max: 30000 }, { name: \"Customer Support\", max: 38000 }, { name: \"Development\", max: 52000 }, { name: \"Marketing\", max: 25000 }, ], }, series: [ { name: \"Budget vs spending\", type: \"radar\", data: [ { value: [4200, 3000, 20000, 35000, 50000, 18000], name: \"Allocated Budget\", }, { value: [5000, 14000, 28000, 26000, 42000, 21000], name: \"Actual Spending\", }, ], }, ], }; ///","title":"Radar"},{"location":"extensions/fenced_code/","text":"The Fenced Code Blocks extension adds a secondary way to define code blocks, which overcomes a few limitations of indented code blocks. Warning Fenced Code Blocks are only supported at the document root level. Configuration 1 2 3 4 # mkdocs.yml markdown_extensions : - fenced_code To enable syntax highlighting, the codehilite extension must be enabled. Syntax 1 2 3 4 5 6 7 8 9 10 ```python def fibonacci ( n ): a , b = 0 , 1 for _ in range ( n ): yield a a , b = b , a + b for num in fibonacci ( 10 ): print ( num ) ``` produces the raw code: def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num) if attr_list is enabled, you can add attributes to the code block by adding them after the language name: 1 2 3 4 5 6 7 8 9 10 ``` { .python #code -id .custom-class } def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num) ``` If produces the same code block as above, but with the id and class attributes added. def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num) If codehilite is enabled. You can add any pygments html formatter options . Warning With codehilite enabled, attr_list key/value attributes are not supported. 1 2 3 4 5 6 7 8 9 10 ``` { .python linenos=\"table\" hl_lines=\"4 5\" } def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num) ``` 1 2 3 4 5 6 7 8 def fibonacci ( n ): a , b = 0 , 1 for _ in range ( n ): yield a a , b = b , a + b for num in fibonacci ( 10 ): print ( num ) As another example, you can also add references to the lines of code (goto line 4 and line 5 ). 1 2 3 4 5 6 7 8 9 10 ``` { .python linenos=\"inline\" hl_lines=\"4 5\" anchorlinenos=\"true\" lineanchors=\"fibo\" } def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num) ``` 1 def fibonacci ( n ): 2 a , b = 0 , 1 3 for _ in range ( n ): 4 yield a 5 a , b = b , a + b 6 7 for num in fibonacci ( 10 ): 8 print ( num )","title":"Fenced code"},{"location":"extensions/fenced_code/#configuration","text":"1 2 3 4 # mkdocs.yml markdown_extensions : - fenced_code To enable syntax highlighting, the codehilite extension must be enabled.","title":"Configuration"},{"location":"extensions/fenced_code/#syntax","text":"1 2 3 4 5 6 7 8 9 10 ```python def fibonacci ( n ): a , b = 0 , 1 for _ in range ( n ): yield a a , b = b , a + b for num in fibonacci ( 10 ): print ( num ) ``` produces the raw code: def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num) if attr_list is enabled, you can add attributes to the code block by adding them after the language name: 1 2 3 4 5 6 7 8 9 10 ``` { .python #code -id .custom-class } def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num) ``` If produces the same code block as above, but with the id and class attributes added. def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num) If codehilite is enabled. You can add any pygments html formatter options . Warning With codehilite enabled, attr_list key/value attributes are not supported. 1 2 3 4 5 6 7 8 9 10 ``` { .python linenos=\"table\" hl_lines=\"4 5\" } def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num) ``` 1 2 3 4 5 6 7 8 def fibonacci ( n ): a , b = 0 , 1 for _ in range ( n ): yield a a , b = b , a + b for num in fibonacci ( 10 ): print ( num ) As another example, you can also add references to the lines of code (goto line 4 and line 5 ). 1 2 3 4 5 6 7 8 9 10 ``` { .python linenos=\"inline\" hl_lines=\"4 5\" anchorlinenos=\"true\" lineanchors=\"fibo\" } def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for num in fibonacci(10): print(num) ``` 1 def fibonacci ( n ): 2 a , b = 0 , 1 3 for _ in range ( n ): 4 yield a 5 a , b = b , a + b 6 7 for num in fibonacci ( 10 ): 8 print ( num )","title":"Syntax"},{"location":"extensions/pymdownx_arithmatex/","text":"The pymdownx.arithmatex extension is a Python-Markdown plugin that enables rendering of mathematical expressions written in LaTeX syntax. Configuration 1 2 3 4 # mkdocs.yml markdown_extensions : - codehilite Note: When pymdownx.arithmatex is enabled, the theme automatically loads KateX material to render math (css, js and fonts). Currently we ship the version v0.16.21 . Syntax Just like latex. 1 2 3 4 Let $ F $ be a primitive of $ f $ , $$ \\int _{a}^b f ( x ) ~ \\mathrm {d}x = F ( b ) - F ( a ) . $$ Let \\(F\\) be a primitive of \\(f\\) , \\[ \\int_{a}^b f(x) ~ \\mathrm{d} x = F(b) - F(a). \\] You can combine with admonition for instance. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 !!! note \"Theorem\" Let $X_1, X _2, \\dots, X_ n$ be a sequence of independent and identically distributed random variables with mean $\\mu$ and finite variance $\\sigma^2$. Define the sample mean: $$ \\overline{X}_n = \\frac{1}{n}\\sum_{i=1}^{n} X_i $$ Then, as $n \\to \\infty$: $$ \\frac{\\sqrt{n}(\\overline{X}_n - \\mu)}{\\sigma} \\xrightarrow{d} \\mathcal{N}(0,1) $$ In other words, the distribution of the standardized sample mean approaches the standard normal distribution: $$ \\frac{\\overline{X}_n - \\mu}{\\sigma/\\sqrt{n}} \\xrightarrow{d} \\mathcal{N}(0,1), \\quad \\text{as } n \\to \\infty $$ Theorem Let \\(X_1, X_2, \\dots, X_n\\) be a sequence of independent and identically distributed random variables with mean \\(\\mu\\) and finite variance \\(\\sigma^2\\) . Define the sample mean: \\[ \\overline{X}_n = \\frac{1}{n}\\sum_{i=1}^{n} X_i \\] Then, as \\(n \\to \\infty\\) : \\[ \\frac{\\sqrt{n}(\\overline{X}_n - \\mu)}{\\sigma} \\xrightarrow{d} \\mathcal{N}(0,1) \\] In other words, the distribution of the standardized sample mean approaches the standard normal distribution: \\[ \\frac{\\overline{X}_n - \\mu}{\\sigma/\\sqrt{n}} \\xrightarrow{d} \\mathcal{N}(0,1), \\quad \\text{as } n \\to \\infty \\]","title":"pymdownx.arithmatex"},{"location":"extensions/pymdownx_arithmatex/#configuration","text":"1 2 3 4 # mkdocs.yml markdown_extensions : - codehilite Note: When pymdownx.arithmatex is enabled, the theme automatically loads KateX material to render math (css, js and fonts). Currently we ship the version v0.16.21 .","title":"Configuration"},{"location":"extensions/pymdownx_arithmatex/#syntax","text":"Just like latex. 1 2 3 4 Let $ F $ be a primitive of $ f $ , $$ \\int _{a}^b f ( x ) ~ \\mathrm {d}x = F ( b ) - F ( a ) . $$ Let \\(F\\) be a primitive of \\(f\\) , \\[ \\int_{a}^b f(x) ~ \\mathrm{d} x = F(b) - F(a). \\] You can combine with admonition for instance. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 !!! note \"Theorem\" Let $X_1, X _2, \\dots, X_ n$ be a sequence of independent and identically distributed random variables with mean $\\mu$ and finite variance $\\sigma^2$. Define the sample mean: $$ \\overline{X}_n = \\frac{1}{n}\\sum_{i=1}^{n} X_i $$ Then, as $n \\to \\infty$: $$ \\frac{\\sqrt{n}(\\overline{X}_n - \\mu)}{\\sigma} \\xrightarrow{d} \\mathcal{N}(0,1) $$ In other words, the distribution of the standardized sample mean approaches the standard normal distribution: $$ \\frac{\\overline{X}_n - \\mu}{\\sigma/\\sqrt{n}} \\xrightarrow{d} \\mathcal{N}(0,1), \\quad \\text{as } n \\to \\infty $$ Theorem Let \\(X_1, X_2, \\dots, X_n\\) be a sequence of independent and identically distributed random variables with mean \\(\\mu\\) and finite variance \\(\\sigma^2\\) . Define the sample mean: \\[ \\overline{X}_n = \\frac{1}{n}\\sum_{i=1}^{n} X_i \\] Then, as \\(n \\to \\infty\\) : \\[ \\frac{\\sqrt{n}(\\overline{X}_n - \\mu)}{\\sigma} \\xrightarrow{d} \\mathcal{N}(0,1) \\] In other words, the distribution of the standardized sample mean approaches the standard normal distribution: \\[ \\frac{\\overline{X}_n - \\mu}{\\sigma/\\sqrt{n}} \\xrightarrow{d} \\mathcal{N}(0,1), \\quad \\text{as } n \\to \\infty \\]","title":"Syntax"},{"location":"extensions/pymdownx_blocks_details/","text":"The pymdownx.blocks.details extension is a Python-Markdown plugin that provides a simple way to create collapsible \"details\" blocks in your Markdown content. Configuration 1 2 3 4 # mkdocs.yml markdown_extensions : - pymdownx.blocks.details Syntax 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ### FAQ /// details | Why copy/paste and not packaged as a dependency? The idea behind this is to give you ownership and control over the code, allowing you to decide how the components are built and styled. Start with some sensible defaults, then customize the components to your needs. *One of the drawbacks of packaging the components in an npm package is that the style is coupled with the implementation. The design of your components should be separate from their implementation.* /// /// details | Do you plan to publish it as an npm package? No. I have no plans to publish it as an npm package. /// /// details | Which frameworks are supported? You can use any framework that supports React. Next.js, Astro, Remix, Gatsby etc. /// FAQ Why copy/paste and not packaged as a dependency? The idea behind this is to give you ownership and control over the code, allowing you to decide how the components are built and styled. Start with some sensible defaults, then customize the components to your needs. One of the drawbacks of packaging the components in an npm package is that the style is coupled with the implementation. The design of your components should be separate from their implementation. Do you plan to publish it as an npm package? No. I have no plans to publish it as an npm package. Which frameworks are supported? You can use any framework that supports React. Next.js, Astro, Remix, Gatsby etc.","title":"pymdownx.blocks.details"},{"location":"extensions/pymdownx_blocks_details/#configuration","text":"1 2 3 4 # mkdocs.yml markdown_extensions : - pymdownx.blocks.details","title":"Configuration"},{"location":"extensions/pymdownx_blocks_details/#syntax","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ### FAQ /// details | Why copy/paste and not packaged as a dependency? The idea behind this is to give you ownership and control over the code, allowing you to decide how the components are built and styled. Start with some sensible defaults, then customize the components to your needs. *One of the drawbacks of packaging the components in an npm package is that the style is coupled with the implementation. The design of your components should be separate from their implementation.* /// /// details | Do you plan to publish it as an npm package? No. I have no plans to publish it as an npm package. /// /// details | Which frameworks are supported? You can use any framework that supports React. Next.js, Astro, Remix, Gatsby etc. ///","title":"Syntax"},{"location":"extensions/pymdownx_blocks_details/#faq","text":"Why copy/paste and not packaged as a dependency? The idea behind this is to give you ownership and control over the code, allowing you to decide how the components are built and styled. Start with some sensible defaults, then customize the components to your needs. One of the drawbacks of packaging the components in an npm package is that the style is coupled with the implementation. The design of your components should be separate from their implementation. Do you plan to publish it as an npm package? No. I have no plans to publish it as an npm package. Which frameworks are supported? You can use any framework that supports React. Next.js, Astro, Remix, Gatsby etc.","title":"FAQ"},{"location":"extensions/pymdownx_blocks_tab/","text":"The pymdownx.blocks.tab extension is a Python-Markdown plugin that allows you to create interactive tabbed content in your Markdown files. Tab blocks are aimed at replacing the pymdownx.tabbed extension (see tab documentation ). Configuration 1 2 3 4 # mkdocs.yml markdown_extensions : - pymdownx.blocks.tab Syntax 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /// tab | `pip` :::bash pip install mkdocs-shadcn /// /// tab | uv :::bash uv add mkdocs-shadcn /// /// tab | poetry :::bash poetry add mkdocs-shadcn /// pip :::bash pip install mkdocs-shadcn uv :::bash uv add mkdocs-shadcn poetry :::bash poetry add mkdocs-shadcn","title":"pymdownx.blocks.tab"},{"location":"extensions/pymdownx_blocks_tab/#configuration","text":"1 2 3 4 # mkdocs.yml markdown_extensions : - pymdownx.blocks.tab","title":"Configuration"},{"location":"extensions/pymdownx_blocks_tab/#syntax","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /// tab | `pip` :::bash pip install mkdocs-shadcn /// /// tab | uv :::bash uv add mkdocs-shadcn /// /// tab | poetry :::bash poetry add mkdocs-shadcn /// pip :::bash pip install mkdocs-shadcn uv :::bash uv add mkdocs-shadcn poetry :::bash poetry add mkdocs-shadcn","title":"Syntax"},{"location":"extensions/pymdownx_progressbar/","text":"The pymdownx.progressbar extension is a Python-Markdown plugin that allows you to create visually appealing progress bars directly in your Markdown content. Configuration 1 2 3 4 # mkdocs.yml markdown_extensions : - pymdownx.progressbar Syntax You can also leverage attr_list to colorize the progress bar. 1 2 3 4 5 [=50% \"\"] [=75% \"75%\"] [=95% \"Awesome\"]{: .success} [=25% \"25%\"]{: .warning} [=5% \"5%\"]{: .danger} 75% Awesome 25% 5%","title":"pymdownx.progressbar"},{"location":"extensions/pymdownx_progressbar/#configuration","text":"1 2 3 4 # mkdocs.yml markdown_extensions : - pymdownx.progressbar","title":"Configuration"},{"location":"extensions/pymdownx_progressbar/#syntax","text":"You can also leverage attr_list to colorize the progress bar. 1 2 3 4 5 [=50% \"\"] [=75% \"75%\"] [=95% \"Awesome\"]{: .success} [=25% \"25%\"]{: .warning} [=5% \"5%\"]{: .danger} 75% Awesome 25% 5%","title":"Syntax"},{"location":"extensions/pymdownx_tabbed/","text":"The pymdownx.tabbed extension is a Python-Markdown plugin that allows you to create tabbed content in your Markdown files. This plugin is likely to be replaced by pymdownx.blocks.tab , supported by mkdocs-shadcn . Configuration 1 2 3 4 # mkdocs.yml markdown_extensions : - pymdownx.tabbed Syntax 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 === \" `pip` \" :::bash pip install mkdocs-shadcn === \"uv\" :::bash uv add mkdocs-shadcn === \"poetry\" :::bash poetry add mkdocs-shadcn pip :::bash pip install mkdocs-shadcn uv :::bash uv add mkdocs-shadcn poetry :::bash poetry add mkdocs-shadcn","title":"pymdownx.tabbed"},{"location":"extensions/pymdownx_tabbed/#configuration","text":"1 2 3 4 # mkdocs.yml markdown_extensions : - pymdownx.tabbed","title":"Configuration"},{"location":"extensions/pymdownx_tabbed/#syntax","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 === \" `pip` \" :::bash pip install mkdocs-shadcn === \"uv\" :::bash uv add mkdocs-shadcn === \"poetry\" :::bash poetry add mkdocs-shadcn pip :::bash pip install mkdocs-shadcn uv :::bash uv add mkdocs-shadcn poetry :::bash poetry add mkdocs-shadcn","title":"Syntax"},{"location":"plugins/excalidraw/","text":"The excalidraw plugin provides a true editor, integrated in the mkdocs dev server. So you can edit the drawing at dev time and display the output svg at build time. Configuration 1 2 3 4 5 # mkdocs.yml plugins : - search - excalidraw Note The excalidraw injects a markdown extension ( shadcn.extensions.excalidraw ) at runtime. You don't have to worry about it. The plugin need to store you excalidraw drawings ( json and svg files). By default it stores these files under excalidraw/ . So you are likely to have this layout: 1 2 3 4 5 6 7 8 9 my-project/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 utils.md \u251c\u2500\u2500 excalidraw/ \u2502 \u251c\u2500\u2500 drawing0.json \u2502 \u2514\u2500\u2500 drawing0.svg You can change this folder with the directory option (the path is relative to the root directory, i.e. the directory where mkdocs.yml lives). 1 2 3 4 5 6 # mkdocs.yml plugins : search : excalidraw : directory : assets/excalidraw Syntax The path to the json file is relative to the directory provided to the plugin. The title is injected as build time through a <title></title> tag inside the output svg file. :::md ~{title}(path/to/file.json) test @font-face { font-family: Excalifont; src: url(data:font/woff2;base64,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); } mkdocs + shadcn + excalidraw","title":"Excalidraw"},{"location":"plugins/excalidraw/#configuration","text":"1 2 3 4 5 # mkdocs.yml plugins : - search - excalidraw Note The excalidraw injects a markdown extension ( shadcn.extensions.excalidraw ) at runtime. You don't have to worry about it. The plugin need to store you excalidraw drawings ( json and svg files). By default it stores these files under excalidraw/ . So you are likely to have this layout: 1 2 3 4 5 6 7 8 9 my-project/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 utils.md \u251c\u2500\u2500 excalidraw/ \u2502 \u251c\u2500\u2500 drawing0.json \u2502 \u2514\u2500\u2500 drawing0.svg You can change this folder with the directory option (the path is relative to the root directory, i.e. the directory where mkdocs.yml lives). 1 2 3 4 5 6 # mkdocs.yml plugins : search : excalidraw : directory : assets/excalidraw","title":"Configuration"},{"location":"plugins/excalidraw/#syntax","text":"The path to the json file is relative to the directory provided to the plugin. The title is injected as build time through a <title></title> tag inside the output svg file. :::md ~{title}(path/to/file.json) test @font-face { font-family: Excalifont; src: url(data:font/woff2;base64,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); } mkdocs + shadcn + excalidraw","title":"Syntax"}]}